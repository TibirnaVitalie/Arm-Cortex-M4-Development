
Arm Cortex-M4 Development.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cb8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000e4c  08000e4c  00001e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e5c  08000e5c  00001e6c  2**0
                  CONTENTS
  4 .ARM          00000008  08000e5c  08000e5c  00001e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000e64  08000e6c  00001e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e64  08000e64  00001e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e68  08000e68  00001e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000e6c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000e6c  00002020  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00001e6c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000145c  00000000  00000000  00001e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004c9  00000000  00000000  000032f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000158  00000000  00000000  000037c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000fa  00000000  00000000  00003918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000023b7  00000000  00000000  00003a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a5a  00000000  00000000  00005dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000092ea  00000000  00000000  00007823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00010b0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004b8  00000000  00000000  00010b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00011008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000e34 	.word	0x08000e34

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000e34 	.word	0x08000e34

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <u8GetGpioPortCode>:
 * 					TS_GPIO_REG_DEF *psGpioPort - GPIO Port Base Address
 * Return       : uint8_t - GPIO Port code
 * ===========================================================================
 */
static inline uint8_t u8GetGpioPortCode(TS_GPIO_REG_DEF *psGpioPort)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
	uint8_t u8GpioPortCode = 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	73fb      	strb	r3, [r7, #15]

	if(psGpioPort == GPIOA)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	4a17      	ldr	r2, [pc, #92]	@ (8000250 <u8GetGpioPortCode+0x6c>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d102      	bne.n	80001fe <u8GetGpioPortCode+0x1a>
	{
		u8GpioPortCode = 0x00;
 80001f8:	2300      	movs	r3, #0
 80001fa:	73fb      	strb	r3, [r7, #15]
 80001fc:	e021      	b.n	8000242 <u8GetGpioPortCode+0x5e>
	}
	else if (psGpioPort == GPIOB)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4a14      	ldr	r2, [pc, #80]	@ (8000254 <u8GetGpioPortCode+0x70>)
 8000202:	4293      	cmp	r3, r2
 8000204:	d102      	bne.n	800020c <u8GetGpioPortCode+0x28>
	{
		u8GpioPortCode = 0x01;
 8000206:	2301      	movs	r3, #1
 8000208:	73fb      	strb	r3, [r7, #15]
 800020a:	e01a      	b.n	8000242 <u8GetGpioPortCode+0x5e>
	}
	else if (psGpioPort == GPIOC)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	4a12      	ldr	r2, [pc, #72]	@ (8000258 <u8GetGpioPortCode+0x74>)
 8000210:	4293      	cmp	r3, r2
 8000212:	d102      	bne.n	800021a <u8GetGpioPortCode+0x36>
	{
		u8GpioPortCode = 0x02;
 8000214:	2302      	movs	r3, #2
 8000216:	73fb      	strb	r3, [r7, #15]
 8000218:	e013      	b.n	8000242 <u8GetGpioPortCode+0x5e>
	}
	else if (psGpioPort == GPIOD)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4a0f      	ldr	r2, [pc, #60]	@ (800025c <u8GetGpioPortCode+0x78>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d102      	bne.n	8000228 <u8GetGpioPortCode+0x44>
	{
		u8GpioPortCode = 0x03;
 8000222:	2303      	movs	r3, #3
 8000224:	73fb      	strb	r3, [r7, #15]
 8000226:	e00c      	b.n	8000242 <u8GetGpioPortCode+0x5e>
	}
	else if (psGpioPort == GPIOE)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4a0d      	ldr	r2, [pc, #52]	@ (8000260 <u8GetGpioPortCode+0x7c>)
 800022c:	4293      	cmp	r3, r2
 800022e:	d102      	bne.n	8000236 <u8GetGpioPortCode+0x52>
	{
		u8GpioPortCode = 0x04;
 8000230:	2304      	movs	r3, #4
 8000232:	73fb      	strb	r3, [r7, #15]
 8000234:	e005      	b.n	8000242 <u8GetGpioPortCode+0x5e>
	}
	else if (psGpioPort == GPIOH)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4a0a      	ldr	r2, [pc, #40]	@ (8000264 <u8GetGpioPortCode+0x80>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d101      	bne.n	8000242 <u8GetGpioPortCode+0x5e>
	{
		u8GpioPortCode = 0x07;
 800023e:	2307      	movs	r3, #7
 8000240:	73fb      	strb	r3, [r7, #15]
	}

	return u8GpioPortCode;
 8000242:	7bfb      	ldrb	r3, [r7, #15]
}
 8000244:	4618      	mov	r0, r3
 8000246:	3714      	adds	r7, #20
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	40020000 	.word	0x40020000
 8000254:	40020400 	.word	0x40020400
 8000258:	40020800 	.word	0x40020800
 800025c:	40020c00 	.word	0x40020c00
 8000260:	40021000 	.word	0x40021000
 8000264:	40021c00 	.word	0x40021c00

08000268 <vDoGpioIrqIni>:
 * Return       : void
 * ===========================================================================
 */

static inline void vDoGpioIrqIni(TS_GPIO_HANDLE *psGpioHandle)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	uint8_t u8GpioPin = (psGpioHandle->sGpioPinConfig->u8GpioPinNum & 0x0F);
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	f003 030f 	and.w	r3, r3, #15
 800027a:	73fb      	strb	r3, [r7, #15]

	SYSCFG_PCKL_EN();
 800027c:	4b17      	ldr	r3, [pc, #92]	@ (80002dc <vDoGpioIrqIni+0x74>)
 800027e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000280:	4a16      	ldr	r2, [pc, #88]	@ (80002dc <vDoGpioIrqIni+0x74>)
 8000282:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000286:	6453      	str	r3, [r2, #68]	@ 0x44
	SYSCFG->EXTICR[(u8GpioPin / 4)] |= ((u8GetGpioPortCode(psGpioHandle->psGpioBaseAddr) & 0x0F) << ((u8GpioPin * 4U) % 16U));
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4618      	mov	r0, r3
 800028e:	f7ff ffa9 	bl	80001e4 <u8GetGpioPortCode>
 8000292:	4603      	mov	r3, r0
 8000294:	f003 020f 	and.w	r2, r3, #15
 8000298:	7bfb      	ldrb	r3, [r7, #15]
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	f003 030c 	and.w	r3, r3, #12
 80002a0:	fa02 f103 	lsl.w	r1, r2, r3
 80002a4:	4a0e      	ldr	r2, [pc, #56]	@ (80002e0 <vDoGpioIrqIni+0x78>)
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
 80002a8:	089b      	lsrs	r3, r3, #2
 80002aa:	b2d8      	uxtb	r0, r3
 80002ac:	4603      	mov	r3, r0
 80002ae:	3302      	adds	r3, #2
 80002b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b4:	460a      	mov	r2, r1
 80002b6:	490a      	ldr	r1, [pc, #40]	@ (80002e0 <vDoGpioIrqIni+0x78>)
 80002b8:	431a      	orrs	r2, r3
 80002ba:	1c83      	adds	r3, r0, #2
 80002bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	EXTI->IMR |= (1 << u8GpioPin);
 80002c0:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <vDoGpioIrqIni+0x7c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	7bfa      	ldrb	r2, [r7, #15]
 80002c6:	2101      	movs	r1, #1
 80002c8:	fa01 f202 	lsl.w	r2, r1, r2
 80002cc:	4611      	mov	r1, r2
 80002ce:	4a05      	ldr	r2, [pc, #20]	@ (80002e4 <vDoGpioIrqIni+0x7c>)
 80002d0:	430b      	orrs	r3, r1
 80002d2:	6013      	str	r3, [r2, #0]
}
 80002d4:	bf00      	nop
 80002d6:	3710      	adds	r7, #16
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40023800 	.word	0x40023800
 80002e0:	40013800 	.word	0x40013800
 80002e4:	40013c00 	.word	0x40013c00

080002e8 <vDoGpioPeriClockControl>:
 * 					boolean bState - State of GPIO peripheral clock
 * Return       : void
 * ===========================================================================
 */
void vDoGpioPeriClockControl(TS_GPIO_REG_DEF *psGpioPort, bool bState)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	460b      	mov	r3, r1
 80002f2:	70fb      	strb	r3, [r7, #3]
	if(bState)
 80002f4:	78fb      	ldrb	r3, [r7, #3]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d041      	beq.n	800037e <vDoGpioPeriClockControl+0x96>
	{
		if(psGpioPort == GPIOA)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4a43      	ldr	r2, [pc, #268]	@ (800040c <vDoGpioPeriClockControl+0x124>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d106      	bne.n	8000310 <vDoGpioPeriClockControl+0x28>
		{
			GPIOA_PCKL_EN();
 8000302:	4b43      	ldr	r3, [pc, #268]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 8000304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000306:	4a42      	ldr	r2, [pc, #264]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 8000308:	f043 0301 	orr.w	r3, r3, #1
 800030c:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (psGpioPort == GPIOH)
		{
			GPIOH_PCKL_DI();
		}
	}
}
 800030e:	e077      	b.n	8000400 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOB)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	4a40      	ldr	r2, [pc, #256]	@ (8000414 <vDoGpioPeriClockControl+0x12c>)
 8000314:	4293      	cmp	r3, r2
 8000316:	d106      	bne.n	8000326 <vDoGpioPeriClockControl+0x3e>
			GPIOB_PCKL_EN();
 8000318:	4b3d      	ldr	r3, [pc, #244]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 800031a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800031c:	4a3c      	ldr	r2, [pc, #240]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 800031e:	f043 0302 	orr.w	r3, r3, #2
 8000322:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000324:	e06c      	b.n	8000400 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOC)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4a3b      	ldr	r2, [pc, #236]	@ (8000418 <vDoGpioPeriClockControl+0x130>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d106      	bne.n	800033c <vDoGpioPeriClockControl+0x54>
			GPIOC_PCKL_EN();
 800032e:	4b38      	ldr	r3, [pc, #224]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 8000330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000332:	4a37      	ldr	r2, [pc, #220]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 8000334:	f043 0304 	orr.w	r3, r3, #4
 8000338:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800033a:	e061      	b.n	8000400 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOD)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4a37      	ldr	r2, [pc, #220]	@ (800041c <vDoGpioPeriClockControl+0x134>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d106      	bne.n	8000352 <vDoGpioPeriClockControl+0x6a>
			GPIOD_PCKL_EN();
 8000344:	4b32      	ldr	r3, [pc, #200]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000348:	4a31      	ldr	r2, [pc, #196]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 800034a:	f043 0308 	orr.w	r3, r3, #8
 800034e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000350:	e056      	b.n	8000400 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOE)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a32      	ldr	r2, [pc, #200]	@ (8000420 <vDoGpioPeriClockControl+0x138>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d106      	bne.n	8000368 <vDoGpioPeriClockControl+0x80>
			GPIOE_PCKL_EN();
 800035a:	4b2d      	ldr	r3, [pc, #180]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 800035c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800035e:	4a2c      	ldr	r2, [pc, #176]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 8000360:	f043 0310 	orr.w	r3, r3, #16
 8000364:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000366:	e04b      	b.n	8000400 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOH)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a2e      	ldr	r2, [pc, #184]	@ (8000424 <vDoGpioPeriClockControl+0x13c>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d147      	bne.n	8000400 <vDoGpioPeriClockControl+0x118>
			GPIOH_PCKL_EN();
 8000370:	4b27      	ldr	r3, [pc, #156]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 8000372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000374:	4a26      	ldr	r2, [pc, #152]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 8000376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800037a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800037c:	e040      	b.n	8000400 <vDoGpioPeriClockControl+0x118>
		if(psGpioPort == GPIOA)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a22      	ldr	r2, [pc, #136]	@ (800040c <vDoGpioPeriClockControl+0x124>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <vDoGpioPeriClockControl+0xac>
			GPIOA_PCKL_DI();
 8000386:	4b22      	ldr	r3, [pc, #136]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038a:	4a21      	ldr	r2, [pc, #132]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 800038c:	f023 0301 	bic.w	r3, r3, #1
 8000390:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000392:	e035      	b.n	8000400 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOB)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a1f      	ldr	r2, [pc, #124]	@ (8000414 <vDoGpioPeriClockControl+0x12c>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d106      	bne.n	80003aa <vDoGpioPeriClockControl+0xc2>
			GPIOB_PCKL_DI();
 800039c:	4b1c      	ldr	r3, [pc, #112]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 800039e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 80003a2:	f023 0302 	bic.w	r3, r3, #2
 80003a6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a8:	e02a      	b.n	8000400 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOC)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000418 <vDoGpioPeriClockControl+0x130>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <vDoGpioPeriClockControl+0xd8>
			GPIOC_PCKL_DI();
 80003b2:	4b17      	ldr	r3, [pc, #92]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b6:	4a16      	ldr	r2, [pc, #88]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 80003b8:	f023 0304 	bic.w	r3, r3, #4
 80003bc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003be:	e01f      	b.n	8000400 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOD)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a16      	ldr	r2, [pc, #88]	@ (800041c <vDoGpioPeriClockControl+0x134>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <vDoGpioPeriClockControl+0xee>
			GPIOD_PCKL_DI();
 80003c8:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003cc:	4a10      	ldr	r2, [pc, #64]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 80003ce:	f023 0308 	bic.w	r3, r3, #8
 80003d2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d4:	e014      	b.n	8000400 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOE)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a11      	ldr	r2, [pc, #68]	@ (8000420 <vDoGpioPeriClockControl+0x138>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <vDoGpioPeriClockControl+0x104>
			GPIOE_PCKL_DI();
 80003de:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 80003e4:	f023 0310 	bic.w	r3, r3, #16
 80003e8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ea:	e009      	b.n	8000400 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOH)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a0d      	ldr	r2, [pc, #52]	@ (8000424 <vDoGpioPeriClockControl+0x13c>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d105      	bne.n	8000400 <vDoGpioPeriClockControl+0x118>
			GPIOH_PCKL_DI();
 80003f4:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f8:	4a05      	ldr	r2, [pc, #20]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 80003fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80003fe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	40020000 	.word	0x40020000
 8000410:	40023800 	.word	0x40023800
 8000414:	40020400 	.word	0x40020400
 8000418:	40020800 	.word	0x40020800
 800041c:	40020c00 	.word	0x40020c00
 8000420:	40021000 	.word	0x40021000
 8000424:	40021c00 	.word	0x40021c00

08000428 <vDoGpioIni>:
 * 					TS_GPIO_HANDLE *psGpioHandle - GPIO Handle structure
 * Return       : void
 * ===========================================================================
 */
void vDoGpioIni(TS_GPIO_HANDLE *psGpioHandle)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	uint8_t u8GpioPin = (psGpioHandle->sGpioPinConfig->u8GpioPinNum & 0x0F);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	f003 030f 	and.w	r3, r3, #15
 800043a:	73fb      	strb	r3, [r7, #15]
	uint8_t u8GpioPinMode = (psGpioHandle->sGpioPinConfig->u8GpioPinMode & 0x07);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	785b      	ldrb	r3, [r3, #1]
 8000442:	f003 0307 	and.w	r3, r3, #7
 8000446:	73bb      	strb	r3, [r7, #14]

	/* Initialize GPIO Pin Mode */
	switch (u8GpioPinMode) {
 8000448:	7bbb      	ldrb	r3, [r7, #14]
 800044a:	2b06      	cmp	r3, #6
 800044c:	d876      	bhi.n	800053c <vDoGpioIni+0x114>
 800044e:	a201      	add	r2, pc, #4	@ (adr r2, 8000454 <vDoGpioIni+0x2c>)
 8000450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000454:	08000471 	.word	0x08000471
 8000458:	08000471 	.word	0x08000471
 800045c:	08000471 	.word	0x08000471
 8000460:	08000471 	.word	0x08000471
 8000464:	080004a9 	.word	0x080004a9
 8000468:	080004db 	.word	0x080004db
 800046c:	0800050d 	.word	0x0800050d
		case GPIO_MODE_IN:
		case GPIO_MODE_OUT:
		case GPIO_MODE_ALT_FUNC:
		case GPIO_MODE_ANALOG:
			psGpioHandle->psGpioBaseAddr->MODER &= ~( 0x03 << (u8GpioPin * 2U));
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	005b      	lsls	r3, r3, #1
 800047a:	2103      	movs	r1, #3
 800047c:	fa01 f303 	lsl.w	r3, r1, r3
 8000480:	43db      	mvns	r3, r3
 8000482:	4619      	mov	r1, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	400a      	ands	r2, r1
 800048a:	601a      	str	r2, [r3, #0]
			psGpioHandle->psGpioBaseAddr->MODER |= (u8GpioPinMode << (u8GpioPin * 2U));
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	7bb9      	ldrb	r1, [r7, #14]
 8000494:	7bfb      	ldrb	r3, [r7, #15]
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	fa01 f303 	lsl.w	r3, r1, r3
 800049c:	4619      	mov	r1, r3
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	430a      	orrs	r2, r1
 80004a4:	601a      	str	r2, [r3, #0]
			break;
 80004a6:	e04a      	b.n	800053e <vDoGpioIni+0x116>

		case GPIO_MODE_IT_RE:
			EXTI->RTSR |= (1 << u8GpioPin);
 80004a8:	4b72      	ldr	r3, [pc, #456]	@ (8000674 <vDoGpioIni+0x24c>)
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	7bfa      	ldrb	r2, [r7, #15]
 80004ae:	2101      	movs	r1, #1
 80004b0:	fa01 f202 	lsl.w	r2, r1, r2
 80004b4:	4611      	mov	r1, r2
 80004b6:	4a6f      	ldr	r2, [pc, #444]	@ (8000674 <vDoGpioIni+0x24c>)
 80004b8:	430b      	orrs	r3, r1
 80004ba:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << u8GpioPin);
 80004bc:	4b6d      	ldr	r3, [pc, #436]	@ (8000674 <vDoGpioIni+0x24c>)
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	7bfa      	ldrb	r2, [r7, #15]
 80004c2:	2101      	movs	r1, #1
 80004c4:	fa01 f202 	lsl.w	r2, r1, r2
 80004c8:	43d2      	mvns	r2, r2
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a69      	ldr	r2, [pc, #420]	@ (8000674 <vDoGpioIni+0x24c>)
 80004ce:	400b      	ands	r3, r1
 80004d0:	60d3      	str	r3, [r2, #12]

			vDoGpioIrqIni(psGpioHandle);
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f7ff fec8 	bl	8000268 <vDoGpioIrqIni>
			break;
 80004d8:	e031      	b.n	800053e <vDoGpioIni+0x116>

		case GPIO_MODE_IT_FE:
			EXTI->FTSR |= (1 << u8GpioPin);
 80004da:	4b66      	ldr	r3, [pc, #408]	@ (8000674 <vDoGpioIni+0x24c>)
 80004dc:	68db      	ldr	r3, [r3, #12]
 80004de:	7bfa      	ldrb	r2, [r7, #15]
 80004e0:	2101      	movs	r1, #1
 80004e2:	fa01 f202 	lsl.w	r2, r1, r2
 80004e6:	4611      	mov	r1, r2
 80004e8:	4a62      	ldr	r2, [pc, #392]	@ (8000674 <vDoGpioIni+0x24c>)
 80004ea:	430b      	orrs	r3, r1
 80004ec:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << u8GpioPin);
 80004ee:	4b61      	ldr	r3, [pc, #388]	@ (8000674 <vDoGpioIni+0x24c>)
 80004f0:	689b      	ldr	r3, [r3, #8]
 80004f2:	7bfa      	ldrb	r2, [r7, #15]
 80004f4:	2101      	movs	r1, #1
 80004f6:	fa01 f202 	lsl.w	r2, r1, r2
 80004fa:	43d2      	mvns	r2, r2
 80004fc:	4611      	mov	r1, r2
 80004fe:	4a5d      	ldr	r2, [pc, #372]	@ (8000674 <vDoGpioIni+0x24c>)
 8000500:	400b      	ands	r3, r1
 8000502:	6093      	str	r3, [r2, #8]

			vDoGpioIrqIni(psGpioHandle);
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f7ff feaf 	bl	8000268 <vDoGpioIrqIni>
			break;
 800050a:	e018      	b.n	800053e <vDoGpioIni+0x116>

		case GPIO_MODE_IT_RFE:
			EXTI->RTSR |= (1 << u8GpioPin);
 800050c:	4b59      	ldr	r3, [pc, #356]	@ (8000674 <vDoGpioIni+0x24c>)
 800050e:	689b      	ldr	r3, [r3, #8]
 8000510:	7bfa      	ldrb	r2, [r7, #15]
 8000512:	2101      	movs	r1, #1
 8000514:	fa01 f202 	lsl.w	r2, r1, r2
 8000518:	4611      	mov	r1, r2
 800051a:	4a56      	ldr	r2, [pc, #344]	@ (8000674 <vDoGpioIni+0x24c>)
 800051c:	430b      	orrs	r3, r1
 800051e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << u8GpioPin);
 8000520:	4b54      	ldr	r3, [pc, #336]	@ (8000674 <vDoGpioIni+0x24c>)
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	7bfa      	ldrb	r2, [r7, #15]
 8000526:	2101      	movs	r1, #1
 8000528:	fa01 f202 	lsl.w	r2, r1, r2
 800052c:	4611      	mov	r1, r2
 800052e:	4a51      	ldr	r2, [pc, #324]	@ (8000674 <vDoGpioIni+0x24c>)
 8000530:	430b      	orrs	r3, r1
 8000532:	60d3      	str	r3, [r2, #12]

			vDoGpioIrqIni(psGpioHandle);
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f7ff fe97 	bl	8000268 <vDoGpioIrqIni>
			break;
 800053a:	e000      	b.n	800053e <vDoGpioIni+0x116>

		default:
			break;
 800053c:	bf00      	nop
	}

	/* Initialize GPIO Pin Speed */
	psGpioHandle->psGpioBaseAddr->OSPEEDR &= ~( 0x03 << (u8GpioPin * 2U));
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	689a      	ldr	r2, [r3, #8]
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	2103      	movs	r1, #3
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	43db      	mvns	r3, r3
 8000550:	4619      	mov	r1, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	400a      	ands	r2, r1
 8000558:	609a      	str	r2, [r3, #8]
	psGpioHandle->psGpioBaseAddr->OSPEEDR |= ((psGpioHandle->sGpioPinConfig->u8GpioPinSpeed & 0x03) << (u8GpioPin * 2U));
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	689a      	ldr	r2, [r3, #8]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	789b      	ldrb	r3, [r3, #2]
 8000566:	f003 0103 	and.w	r1, r3, #3
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	fa01 f303 	lsl.w	r3, r1, r3
 8000572:	4619      	mov	r1, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	430a      	orrs	r2, r1
 800057a:	609a      	str	r2, [r3, #8]

	/* Initialize GPIO Pin Pull-Up/Pull-Down mode */
	psGpioHandle->psGpioBaseAddr->PUPDR &= ~( 0x03 << (u8GpioPin * 2U));
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	68da      	ldr	r2, [r3, #12]
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	2103      	movs	r1, #3
 8000588:	fa01 f303 	lsl.w	r3, r1, r3
 800058c:	43db      	mvns	r3, r3
 800058e:	4619      	mov	r1, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	400a      	ands	r2, r1
 8000596:	60da      	str	r2, [r3, #12]
	psGpioHandle->psGpioBaseAddr->PUPDR |= ((psGpioHandle->sGpioPinConfig->u8GpioPinPuPdControl & 0x03) << (u8GpioPin * 2U));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	68da      	ldr	r2, [r3, #12]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	78db      	ldrb	r3, [r3, #3]
 80005a4:	f003 0103 	and.w	r1, r3, #3
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	fa01 f303 	lsl.w	r3, r1, r3
 80005b0:	4619      	mov	r1, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	430a      	orrs	r2, r1
 80005b8:	60da      	str	r2, [r3, #12]

	/* Initialize GPIO Pin Output type */
	psGpioHandle->psGpioBaseAddr->OTYPER &= ~( 0x01 << (u8GpioPin * 2U));
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	2101      	movs	r1, #1
 80005c6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ca:	43db      	mvns	r3, r3
 80005cc:	4619      	mov	r1, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	400a      	ands	r2, r1
 80005d4:	605a      	str	r2, [r3, #4]
	psGpioHandle->psGpioBaseAddr->OTYPER |= ((psGpioHandle->sGpioPinConfig->u8GpioPinOPType & 0x01) << u8GpioPin);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	685a      	ldr	r2, [r3, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	791b      	ldrb	r3, [r3, #4]
 80005e2:	f003 0101 	and.w	r1, r3, #1
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	fa01 f303 	lsl.w	r3, r1, r3
 80005ec:	4619      	mov	r1, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	430a      	orrs	r2, r1
 80005f4:	605a      	str	r2, [r3, #4]

	/* Initialize GPIO Pin Alternate functions mode */
	if(psGpioHandle->sGpioPinConfig->u8GpioPinMode == (uint8_t)GPIO_MODE_ALT_FUNC)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d134      	bne.n	800066a <vDoGpioIni+0x242>
	{
		psGpioHandle->psGpioBaseAddr->AFR[(u8GpioPin / 8U)] &= ~(( 0x0F << (u8GpioPin * 4U) % 32U));
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	7bfa      	ldrb	r2, [r7, #15]
 8000606:	08d2      	lsrs	r2, r2, #3
 8000608:	b2d0      	uxtb	r0, r2
 800060a:	4602      	mov	r2, r0
 800060c:	3208      	adds	r2, #8
 800060e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	f003 031c 	and.w	r3, r3, #28
 800061a:	210f      	movs	r1, #15
 800061c:	fa01 f303 	lsl.w	r3, r1, r3
 8000620:	43db      	mvns	r3, r3
 8000622:	4619      	mov	r1, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4011      	ands	r1, r2
 800062a:	f100 0208 	add.w	r2, r0, #8
 800062e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		psGpioHandle->psGpioBaseAddr->AFR[(u8GpioPin / 8U)] |= ((psGpioHandle->sGpioPinConfig->u8GpioPinAltFunMode & 0x0F) << ((u8GpioPin * 4U) % 32U));
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	7bfa      	ldrb	r2, [r7, #15]
 8000638:	08d2      	lsrs	r2, r2, #3
 800063a:	b2d0      	uxtb	r0, r2
 800063c:	4602      	mov	r2, r0
 800063e:	3208      	adds	r2, #8
 8000640:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	795b      	ldrb	r3, [r3, #5]
 800064a:	f003 010f 	and.w	r1, r3, #15
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	f003 031c 	and.w	r3, r3, #28
 8000656:	fa01 f303 	lsl.w	r3, r1, r3
 800065a:	4619      	mov	r1, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4311      	orrs	r1, r2
 8000662:	f100 0208 	add.w	r2, r0, #8
 8000666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40013c00 	.word	0x40013c00

08000678 <u32CalculatePclk1Value>:
 * Return       : uint32_t - Value of Pclk1
 * ===========================================================================
 */

static inline uint32_t u32CalculatePclk1Value(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
	uint8_t u8Apb1Presc = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	73fb      	strb	r3, [r7, #15]
	uint16_t u16AhbPresc = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	81bb      	strh	r3, [r7, #12]
	uint32_t u32RegVal, u32SysSource = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]

	/* Read the system clock source */
	u32RegVal = ((RCC->CFGR >> 2U) & 0x03);
 800068a:	4b43      	ldr	r3, [pc, #268]	@ (8000798 <u32CalculatePclk1Value+0x120>)
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	089b      	lsrs	r3, r3, #2
 8000690:	f003 0303 	and.w	r3, r3, #3
 8000694:	607b      	str	r3, [r7, #4]

	switch (u32RegVal) {
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b02      	cmp	r3, #2
 800069a:	d00f      	beq.n	80006bc <u32CalculatePclk1Value+0x44>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d810      	bhi.n	80006c4 <u32CalculatePclk1Value+0x4c>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d003      	beq.n	80006b0 <u32CalculatePclk1Value+0x38>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d003      	beq.n	80006b6 <u32CalculatePclk1Value+0x3e>
		case 0x02:
			u32SysSource = u32CalculatePllOutputValue();
			break;

		default:
			break;
 80006ae:	e009      	b.n	80006c4 <u32CalculatePclk1Value+0x4c>
			u32SysSource = 16000000U;
 80006b0:	4b3a      	ldr	r3, [pc, #232]	@ (800079c <u32CalculatePclk1Value+0x124>)
 80006b2:	60bb      	str	r3, [r7, #8]
			break;
 80006b4:	e007      	b.n	80006c6 <u32CalculatePclk1Value+0x4e>
			u32SysSource = 25000000U;
 80006b6:	4b3a      	ldr	r3, [pc, #232]	@ (80007a0 <u32CalculatePclk1Value+0x128>)
 80006b8:	60bb      	str	r3, [r7, #8]
			break;
 80006ba:	e004      	b.n	80006c6 <u32CalculatePclk1Value+0x4e>
			u32SysSource = u32CalculatePllOutputValue();
 80006bc:	f000 f872 	bl	80007a4 <u32CalculatePllOutputValue>
 80006c0:	60b8      	str	r0, [r7, #8]
			break;
 80006c2:	e000      	b.n	80006c6 <u32CalculatePclk1Value+0x4e>
			break;
 80006c4:	bf00      	nop
	}

	/* Read the AHB prescaler */
	u32RegVal = ((RCC->CFGR >> 4U) & 0x0F);
 80006c6:	4b34      	ldr	r3, [pc, #208]	@ (8000798 <u32CalculatePclk1Value+0x120>)
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	091b      	lsrs	r3, r3, #4
 80006cc:	f003 030f 	and.w	r3, r3, #15
 80006d0:	607b      	str	r3, [r7, #4]

	switch (u32RegVal) {
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	3b08      	subs	r3, #8
 80006d6:	2b07      	cmp	r3, #7
 80006d8:	d82c      	bhi.n	8000734 <u32CalculatePclk1Value+0xbc>
 80006da:	a201      	add	r2, pc, #4	@ (adr r2, 80006e0 <u32CalculatePclk1Value+0x68>)
 80006dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e0:	08000701 	.word	0x08000701
 80006e4:	08000707 	.word	0x08000707
 80006e8:	0800070d 	.word	0x0800070d
 80006ec:	08000713 	.word	0x08000713
 80006f0:	08000719 	.word	0x08000719
 80006f4:	0800071f 	.word	0x0800071f
 80006f8:	08000725 	.word	0x08000725
 80006fc:	0800072d 	.word	0x0800072d
		case (uint32_t)0b1000:
			u16AhbPresc = 2U;
 8000700:	2302      	movs	r3, #2
 8000702:	81bb      	strh	r3, [r7, #12]
			break;
 8000704:	e019      	b.n	800073a <u32CalculatePclk1Value+0xc2>

		case (uint32_t)0b1001:
			u16AhbPresc = 4U;
 8000706:	2304      	movs	r3, #4
 8000708:	81bb      	strh	r3, [r7, #12]
			break;
 800070a:	e016      	b.n	800073a <u32CalculatePclk1Value+0xc2>

		case (uint32_t)0b1010:
			u16AhbPresc = 8U;
 800070c:	2308      	movs	r3, #8
 800070e:	81bb      	strh	r3, [r7, #12]
			break;
 8000710:	e013      	b.n	800073a <u32CalculatePclk1Value+0xc2>

		case (uint32_t)0b1011:
			u16AhbPresc = 16U;
 8000712:	2310      	movs	r3, #16
 8000714:	81bb      	strh	r3, [r7, #12]
			break;
 8000716:	e010      	b.n	800073a <u32CalculatePclk1Value+0xc2>

		case (uint32_t)0b1100:
			u16AhbPresc = 64U;
 8000718:	2340      	movs	r3, #64	@ 0x40
 800071a:	81bb      	strh	r3, [r7, #12]
			break;
 800071c:	e00d      	b.n	800073a <u32CalculatePclk1Value+0xc2>

		case (uint32_t)0b1101:
			u16AhbPresc = 128U;
 800071e:	2380      	movs	r3, #128	@ 0x80
 8000720:	81bb      	strh	r3, [r7, #12]
			break;
 8000722:	e00a      	b.n	800073a <u32CalculatePclk1Value+0xc2>

		case (uint32_t)0b1110:
			u16AhbPresc = (uint16_t)256U;
 8000724:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000728:	81bb      	strh	r3, [r7, #12]
			break;
 800072a:	e006      	b.n	800073a <u32CalculatePclk1Value+0xc2>

		case (uint32_t)0b1111:
			u16AhbPresc = (uint16_t)512U;
 800072c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000730:	81bb      	strh	r3, [r7, #12]
			break;
 8000732:	e002      	b.n	800073a <u32CalculatePclk1Value+0xc2>

		default:
			u16AhbPresc = 1U;
 8000734:	2301      	movs	r3, #1
 8000736:	81bb      	strh	r3, [r7, #12]
			break;
 8000738:	bf00      	nop
	}

	/* Read the APB1 prescaler */
		u32RegVal = ((RCC->CFGR >> 10U) & 0x07);
 800073a:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <u32CalculatePclk1Value+0x120>)
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	0a9b      	lsrs	r3, r3, #10
 8000740:	f003 0307 	and.w	r3, r3, #7
 8000744:	607b      	str	r3, [r7, #4]

		switch (u32RegVal) {
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	3b04      	subs	r3, #4
 800074a:	2b03      	cmp	r3, #3
 800074c:	d816      	bhi.n	800077c <u32CalculatePclk1Value+0x104>
 800074e:	a201      	add	r2, pc, #4	@ (adr r2, 8000754 <u32CalculatePclk1Value+0xdc>)
 8000750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000754:	08000765 	.word	0x08000765
 8000758:	0800076b 	.word	0x0800076b
 800075c:	08000771 	.word	0x08000771
 8000760:	08000777 	.word	0x08000777
			case 0b0100:
				u8Apb1Presc = 2U;
 8000764:	2302      	movs	r3, #2
 8000766:	73fb      	strb	r3, [r7, #15]
				break;
 8000768:	e00b      	b.n	8000782 <u32CalculatePclk1Value+0x10a>

			case 0b0101:
				u8Apb1Presc = 4U;
 800076a:	2304      	movs	r3, #4
 800076c:	73fb      	strb	r3, [r7, #15]
				break;
 800076e:	e008      	b.n	8000782 <u32CalculatePclk1Value+0x10a>

			case 0b0110:
				u8Apb1Presc = 8U;
 8000770:	2308      	movs	r3, #8
 8000772:	73fb      	strb	r3, [r7, #15]
				break;
 8000774:	e005      	b.n	8000782 <u32CalculatePclk1Value+0x10a>

			case 0b0111:
				u8Apb1Presc = 16U;
 8000776:	2310      	movs	r3, #16
 8000778:	73fb      	strb	r3, [r7, #15]
				break;
 800077a:	e002      	b.n	8000782 <u32CalculatePclk1Value+0x10a>

			default:
				u8Apb1Presc = 1U;
 800077c:	2301      	movs	r3, #1
 800077e:	73fb      	strb	r3, [r7, #15]
				break;
 8000780:	bf00      	nop
		}

	return ((u32SysSource / u16AhbPresc) / u8Apb1Presc);
 8000782:	89bb      	ldrh	r3, [r7, #12]
 8000784:	68ba      	ldr	r2, [r7, #8]
 8000786:	fbb2 f2f3 	udiv	r2, r2, r3
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	00f42400 	.word	0x00f42400
 80007a0:	017d7840 	.word	0x017d7840

080007a4 <u32CalculatePllOutputValue>:
 * Return       : uint32_t - Value of PLL Output
 * ===========================================================================
 */

static inline uint32_t u32CalculatePllOutputValue(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
	return 0x01;
 80007a8:	2301      	movs	r3, #1
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr

080007b2 <vDoI2CGenerateStartCondition>:
 * Return       : void
 * ===========================================================================
 */

static inline void vDoI2CGenerateStartCondition(TS_I2C_REG_DEF *psI2C)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
	psI2C->CR1 |= (0x01 << 8U);							/* Generate Start Condition		*/
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	601a      	str	r2, [r3, #0]

	while(!bDoGetI2CFlag(psI2C, I2C_SB_FLAG));			/* Confirm Start Bit			*/
 80007c6:	bf00      	nop
 80007c8:	2100      	movs	r1, #0
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f000 fa3c 	bl	8000c48 <bDoGetI2CFlag>
 80007d0:	4603      	mov	r3, r0
 80007d2:	f083 0301 	eor.w	r3, r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d1f5      	bne.n	80007c8 <vDoI2CGenerateStartCondition+0x16>
}
 80007dc:	bf00      	nop
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <vDoI2CGenerateStopCondition>:
 * Return       : void
 * ===========================================================================
 */

static inline void vDoI2CGenerateStopCondition(TS_I2C_REG_DEF *psI2C)
{
 80007e6:	b480      	push	{r7}
 80007e8:	b083      	sub	sp, #12
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
	psI2C->CR1 |= (0x01 << 9U);							/* Generate Stop Condition		*/
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	601a      	str	r2, [r3, #0]
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <vDoI2CExecuteAddressPhase>:
 * Return       : void
 * ===========================================================================
 */

static inline void vDoI2CExecuteAddressPhase(TS_I2C_REG_DEF *psI2C, uint8_t u8SlaveAddr, uint8_t u8ReadWrite)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	70fb      	strb	r3, [r7, #3]
 8000810:	4613      	mov	r3, r2
 8000812:	70bb      	strb	r3, [r7, #2]
	uint8_t u8DrValue = ((u8SlaveAddr & 0x7F) << 1U);	/* Shift address by 1 bit		*/
 8000814:	78fb      	ldrb	r3, [r7, #3]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	73fb      	strb	r3, [r7, #15]

	u8DrValue &= ~(0x01 << 0U);							/* Reset R/W bit				*/
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	f023 0301 	bic.w	r3, r3, #1
 8000820:	73fb      	strb	r3, [r7, #15]
	u8DrValue |= ((u8ReadWrite && 0x01) << 0U);			/* Set   R/W value				*/
 8000822:	78bb      	ldrb	r3, [r7, #2]
 8000824:	2b00      	cmp	r3, #0
 8000826:	bf14      	ite	ne
 8000828:	2301      	movne	r3, #1
 800082a:	2300      	moveq	r3, #0
 800082c:	b2db      	uxtb	r3, r3
 800082e:	b25a      	sxtb	r2, r3
 8000830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000834:	4313      	orrs	r3, r2
 8000836:	b25b      	sxtb	r3, r3
 8000838:	73fb      	strb	r3, [r7, #15]

	psI2C->DR = (uint32_t)u8DrValue;
 800083a:	7bfa      	ldrb	r2, [r7, #15]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	611a      	str	r2, [r3, #16]

	while(!bDoGetI2CFlag(psI2C, I2C_ADDR_FLAG));		/* Confirm Address sent			*/
 8000840:	bf00      	nop
 8000842:	2101      	movs	r1, #1
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f000 f9ff 	bl	8000c48 <bDoGetI2CFlag>
 800084a:	4603      	mov	r3, r0
 800084c:	f083 0301 	eor.w	r3, r3, #1
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1f5      	bne.n	8000842 <vDoI2CExecuteAddressPhase+0x3e>

	/* Clear ADDR Flag */
	vDoI2CClearAddrFlag(psI2C);
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f000 f804 	bl	8000864 <vDoI2CClearAddrFlag>
}
 800085c:	bf00      	nop
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <vDoI2CClearAddrFlag>:
 * Return       : void
 * ===========================================================================
 */

static inline void vDoI2CClearAddrFlag(TS_I2C_REG_DEF *psI2C)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	uint32_t u32RegisterVal = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]

	/* Clear ADDR Flag by reading SR1 and SR2 */
	u32RegisterVal = psI2C->SR[0];
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	60fb      	str	r3, [r7, #12]
	u32RegisterVal = psI2C->SR[1];
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	60fb      	str	r3, [r7, #12]

	/* Avoid unused variable warning */
	(void)u32RegisterVal;
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
	...

08000888 <vDoI2CPeriClockControl>:
 * Return       : void
 * ===========================================================================
 */

void vDoI2CPeriClockControl(TS_I2C_REG_DEF *psI2C, bool bState)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	70fb      	strb	r3, [r7, #3]
	if(bState)
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d020      	beq.n	80008dc <vDoI2CPeriClockControl+0x54>
	{
		if(psI2C == I2C1)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4a22      	ldr	r2, [pc, #136]	@ (8000928 <vDoI2CPeriClockControl+0xa0>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d106      	bne.n	80008b0 <vDoI2CPeriClockControl+0x28>
		{
			I2C1_PCKL_EN();
 80008a2:	4b22      	ldr	r3, [pc, #136]	@ (800092c <vDoI2CPeriClockControl+0xa4>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a6:	4a21      	ldr	r2, [pc, #132]	@ (800092c <vDoI2CPeriClockControl+0xa4>)
 80008a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008ac:	6413      	str	r3, [r2, #64]	@ 0x40
		else if (psI2C == I2C3)
		{
			I2C3_PCKL_DI();
		}
	}
}
 80008ae:	e035      	b.n	800091c <vDoI2CPeriClockControl+0x94>
		else if (psI2C == I2C2)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000930 <vDoI2CPeriClockControl+0xa8>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d106      	bne.n	80008c6 <vDoI2CPeriClockControl+0x3e>
			I2C2_PCKL_EN();
 80008b8:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <vDoI2CPeriClockControl+0xa4>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008bc:	4a1b      	ldr	r2, [pc, #108]	@ (800092c <vDoI2CPeriClockControl+0xa4>)
 80008be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008c2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008c4:	e02a      	b.n	800091c <vDoI2CPeriClockControl+0x94>
		else if (psI2C == I2C3)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000934 <vDoI2CPeriClockControl+0xac>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d126      	bne.n	800091c <vDoI2CPeriClockControl+0x94>
			I2C3_PCKL_EN();
 80008ce:	4b17      	ldr	r3, [pc, #92]	@ (800092c <vDoI2CPeriClockControl+0xa4>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d2:	4a16      	ldr	r2, [pc, #88]	@ (800092c <vDoI2CPeriClockControl+0xa4>)
 80008d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80008d8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008da:	e01f      	b.n	800091c <vDoI2CPeriClockControl+0x94>
		if(psI2C == I2C1)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a12      	ldr	r2, [pc, #72]	@ (8000928 <vDoI2CPeriClockControl+0xa0>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d106      	bne.n	80008f2 <vDoI2CPeriClockControl+0x6a>
			I2C1_PCKL_DI();
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <vDoI2CPeriClockControl+0xa4>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e8:	4a10      	ldr	r2, [pc, #64]	@ (800092c <vDoI2CPeriClockControl+0xa4>)
 80008ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80008ee:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008f0:	e014      	b.n	800091c <vDoI2CPeriClockControl+0x94>
		else if (psI2C == I2C2)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000930 <vDoI2CPeriClockControl+0xa8>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d106      	bne.n	8000908 <vDoI2CPeriClockControl+0x80>
			I2C2_PCKL_DI();
 80008fa:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <vDoI2CPeriClockControl+0xa4>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fe:	4a0b      	ldr	r2, [pc, #44]	@ (800092c <vDoI2CPeriClockControl+0xa4>)
 8000900:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000904:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000906:	e009      	b.n	800091c <vDoI2CPeriClockControl+0x94>
		else if (psI2C == I2C3)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a0a      	ldr	r2, [pc, #40]	@ (8000934 <vDoI2CPeriClockControl+0xac>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d105      	bne.n	800091c <vDoI2CPeriClockControl+0x94>
			I2C3_PCKL_DI();
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <vDoI2CPeriClockControl+0xa4>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000914:	4a05      	ldr	r2, [pc, #20]	@ (800092c <vDoI2CPeriClockControl+0xa4>)
 8000916:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800091a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40005400 	.word	0x40005400
 800092c:	40023800 	.word	0x40023800
 8000930:	40005800 	.word	0x40005800
 8000934:	40005c00 	.word	0x40005c00

08000938 <vDoI2CIni>:
 * Return       : void
 * ===========================================================================
 */

void vDoI2CIni(TS_I2C_HANDLE *psI2CHandle)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	uint16_t u16CcrValue = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	81fb      	strh	r3, [r7, #14]
	uint8_t u8TriseValue = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	737b      	strb	r3, [r7, #13]
	uint8_t u32Pclk1 = u32CalculatePclk1Value();
 8000948:	f7ff fe96 	bl	8000678 <u32CalculatePclk1Value>
 800094c:	4603      	mov	r3, r0
 800094e:	733b      	strb	r3, [r7, #12]
	uint8_t u8Pclk1Cr2 = ((u32Pclk1 / 1000000U) & 0x3F);
 8000950:	7b3b      	ldrb	r3, [r7, #12]
 8000952:	4a8a      	ldr	r2, [pc, #552]	@ (8000b7c <vDoI2CIni+0x244>)
 8000954:	fba2 2303 	umull	r2, r3, r2, r3
 8000958:	0c9b      	lsrs	r3, r3, #18
 800095a:	b2db      	uxtb	r3, r3
 800095c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000960:	72fb      	strb	r3, [r7, #11]
	uint8_t u8AddrMode = (psI2CHandle->psI2CConfig->u8I2CAddrMode & 0x01);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	799b      	ldrb	r3, [r3, #6]
 8000968:	f003 0301 	and.w	r3, r3, #1
 800096c:	72bb      	strb	r3, [r7, #10]

	/* Initialize Acknowledge feature */
	psI2CHandle->psI2CBaseAddr->CR1 &= ~(0x01 << 10U);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800097c:	601a      	str	r2, [r3, #0]
	psI2CHandle->psI2CBaseAddr->CR1 |= ((psI2CHandle->psI2CConfig->u8I2CAckControl & 0x01) << 10U);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	6819      	ldr	r1, [r3, #0]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	79db      	ldrb	r3, [r3, #7]
 800098a:	029b      	lsls	r3, r3, #10
 800098c:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	430a      	orrs	r2, r1
 8000996:	601a      	str	r2, [r3, #0]

	/* Initialize I2C Peripheral clock frequency */
	psI2CHandle->psI2CBaseAddr->CR2 &= ~(0x3F << 0U);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	685a      	ldr	r2, [r3, #4]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80009a6:	605a      	str	r2, [r3, #4]
	psI2CHandle->psI2CBaseAddr->CR2 |= (((u8Pclk1Cr2 <= 0x01) ? 0x02 : u8Pclk1Cr2) << 0U);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	685a      	ldr	r2, [r3, #4]
 80009ae:	7afb      	ldrb	r3, [r7, #11]
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	bf38      	it	cc
 80009b4:	2302      	movcc	r3, #2
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	4619      	mov	r1, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	430a      	orrs	r2, r1
 80009c0:	605a      	str	r2, [r3, #4]

	/* Initialize Addressing mode and Device Own Address */
	psI2CHandle->psI2CBaseAddr->OAR1 |= (0x01 << 14U);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	689a      	ldr	r2, [r3, #8]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80009d0:	609a      	str	r2, [r3, #8]
	psI2CHandle->psI2CBaseAddr->OAR1 &= ~(0x01 << 15U);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	689a      	ldr	r2, [r3, #8]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80009e0:	609a      	str	r2, [r3, #8]
	psI2CHandle->psI2CBaseAddr->OAR1 |= (u8AddrMode << 15U);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	6899      	ldr	r1, [r3, #8]
 80009e8:	7abb      	ldrb	r3, [r7, #10]
 80009ea:	03da      	lsls	r2, r3, #15
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	430a      	orrs	r2, r1
 80009f2:	609a      	str	r2, [r3, #8]

	switch (u8AddrMode) {
 80009f4:	7abb      	ldrb	r3, [r7, #10]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d002      	beq.n	8000a00 <vDoI2CIni+0xc8>
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d00d      	beq.n	8000a1a <vDoI2CIni+0xe2>
		case 0x01:
			psI2CHandle->psI2CBaseAddr->OAR1 |= ((psI2CHandle->psI2CConfig->u16I2CDeviceAddr & 0x03FF) << 0U);
			break;

		default:
			break;
 80009fe:	e019      	b.n	8000a34 <vDoI2CIni+0xfc>
			psI2CHandle->psI2CBaseAddr->OAR1 |= ((psI2CHandle->psI2CConfig->u16I2CDeviceAddr & 0x7F) << 1U);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	6899      	ldr	r1, [r3, #8]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	889b      	ldrh	r3, [r3, #4]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	430a      	orrs	r2, r1
 8000a16:	609a      	str	r2, [r3, #8]
			break;
 8000a18:	e00c      	b.n	8000a34 <vDoI2CIni+0xfc>
			psI2CHandle->psI2CBaseAddr->OAR1 |= ((psI2CHandle->psI2CConfig->u16I2CDeviceAddr & 0x03FF) << 0U);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	6899      	ldr	r1, [r3, #8]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	889b      	ldrh	r3, [r3, #4]
 8000a26:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	609a      	str	r2, [r3, #8]
			break;
 8000a32:	bf00      	nop
	}

	/* CCR calculations */
	switch (psI2CHandle->psI2CConfig->u328I2CSclSpeed) {
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a51      	ldr	r2, [pc, #324]	@ (8000b80 <vDoI2CIni+0x248>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d01a      	beq.n	8000a76 <vDoI2CIni+0x13e>
 8000a40:	4a4f      	ldr	r2, [pc, #316]	@ (8000b80 <vDoI2CIni+0x248>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d847      	bhi.n	8000ad6 <vDoI2CIni+0x19e>
 8000a46:	4a4f      	ldr	r2, [pc, #316]	@ (8000b84 <vDoI2CIni+0x24c>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d003      	beq.n	8000a54 <vDoI2CIni+0x11c>
 8000a4c:	4a4e      	ldr	r2, [pc, #312]	@ (8000b88 <vDoI2CIni+0x250>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d011      	beq.n	8000a76 <vDoI2CIni+0x13e>
			/* Calculate CCR for Slow Mode */
			u16CcrValue = (u32Pclk1 / (psI2CHandle->psI2CConfig->u328I2CSclSpeed * ((psI2CHandle->psI2CConfig->u328I2CSclSpeed == I2C_SCL_SPEED_FM_2K)? 3U : 25U)));
			break;

		default:
			break;
 8000a52:	e040      	b.n	8000ad6 <vDoI2CIni+0x19e>
			psI2CHandle->psI2CBaseAddr->CCR &= ~(0x01 << 15U);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	69da      	ldr	r2, [r3, #28]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000a62:	61da      	str	r2, [r3, #28]
			u16CcrValue = (u32Pclk1 / (psI2CHandle->psI2CConfig->u328I2CSclSpeed * 2U)) ;
 8000a64:	7b3a      	ldrb	r2, [r7, #12]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	81fb      	strh	r3, [r7, #14]
			break;
 8000a74:	e030      	b.n	8000ad8 <vDoI2CIni+0x1a0>
			psI2CHandle->psI2CBaseAddr->CCR |= (0x01 << 15U);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	69da      	ldr	r2, [r3, #28]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000a84:	61da      	str	r2, [r3, #28]
			psI2CHandle->psI2CBaseAddr->CCR &= ~(0x01 << 14U);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	69da      	ldr	r2, [r3, #28]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000a94:	61da      	str	r2, [r3, #28]
			psI2CHandle->psI2CBaseAddr->CCR |= ((psI2CHandle->psI2CConfig->u8I2CFmDutyCycle & 0x01) << 14U);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	69d9      	ldr	r1, [r3, #28]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	7a1b      	ldrb	r3, [r3, #8]
 8000aa2:	039b      	lsls	r3, r3, #14
 8000aa4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	430a      	orrs	r2, r1
 8000aae:	61da      	str	r2, [r3, #28]
			u16CcrValue = (u32Pclk1 / (psI2CHandle->psI2CConfig->u328I2CSclSpeed * ((psI2CHandle->psI2CConfig->u328I2CSclSpeed == I2C_SCL_SPEED_FM_2K)? 3U : 25U)));
 8000ab0:	7b3a      	ldrb	r2, [r7, #12]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	6819      	ldr	r1, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4832      	ldr	r0, [pc, #200]	@ (8000b88 <vDoI2CIni+0x250>)
 8000ac0:	4283      	cmp	r3, r0
 8000ac2:	d101      	bne.n	8000ac8 <vDoI2CIni+0x190>
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	e000      	b.n	8000aca <vDoI2CIni+0x192>
 8000ac8:	2319      	movs	r3, #25
 8000aca:	fb01 f303 	mul.w	r3, r1, r3
 8000ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad2:	81fb      	strh	r3, [r7, #14]
			break;
 8000ad4:	e000      	b.n	8000ad8 <vDoI2CIni+0x1a0>
			break;
 8000ad6:	bf00      	nop
	}

	/* Set CCR Value */
	psI2CHandle->psI2CBaseAddr->CCR &= ~(0x0FFF << 0U);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	6812      	ldr	r2, [r2, #0]
 8000ae2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8000ae6:	f023 030f 	bic.w	r3, r3, #15
 8000aea:	61d3      	str	r3, [r2, #28]
	psI2CHandle->psI2CBaseAddr->CCR |= ((u16CcrValue & 0x0FFF) << 0U);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	69d9      	ldr	r1, [r3, #28]
 8000af2:	89fb      	ldrh	r3, [r7, #14]
 8000af4:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	430a      	orrs	r2, r1
 8000afe:	61da      	str	r2, [r3, #28]

	/* TRISE calculations */
	switch (psI2CHandle->psI2CConfig->u328I2CSclSpeed) {
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a1e      	ldr	r2, [pc, #120]	@ (8000b80 <vDoI2CIni+0x248>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d012      	beq.n	8000b32 <vDoI2CIni+0x1fa>
 8000b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8000b80 <vDoI2CIni+0x248>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d81d      	bhi.n	8000b4e <vDoI2CIni+0x216>
 8000b12:	4a1c      	ldr	r2, [pc, #112]	@ (8000b84 <vDoI2CIni+0x24c>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d003      	beq.n	8000b20 <vDoI2CIni+0x1e8>
 8000b18:	4a1b      	ldr	r2, [pc, #108]	@ (8000b88 <vDoI2CIni+0x250>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d009      	beq.n	8000b32 <vDoI2CIni+0x1fa>
		case I2C_SCL_SPEED_FM_4K:
			u8TriseValue = (((u32Pclk1 * 300U) / 1000000000U) + 1U);
			break;

		default:
			break;
 8000b1e:	e016      	b.n	8000b4e <vDoI2CIni+0x216>
			u8TriseValue = ((u32Pclk1 / 1000000U) + 1U);
 8000b20:	7b3b      	ldrb	r3, [r7, #12]
 8000b22:	4a16      	ldr	r2, [pc, #88]	@ (8000b7c <vDoI2CIni+0x244>)
 8000b24:	fba2 2303 	umull	r2, r3, r2, r3
 8000b28:	0c9b      	lsrs	r3, r3, #18
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	737b      	strb	r3, [r7, #13]
			break;
 8000b30:	e00e      	b.n	8000b50 <vDoI2CIni+0x218>
			u8TriseValue = (((u32Pclk1 * 300U) / 1000000000U) + 1U);
 8000b32:	7b3b      	ldrb	r3, [r7, #12]
 8000b34:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000b38:	fb02 f303 	mul.w	r3, r2, r3
 8000b3c:	0a5b      	lsrs	r3, r3, #9
 8000b3e:	4a13      	ldr	r2, [pc, #76]	@ (8000b8c <vDoI2CIni+0x254>)
 8000b40:	fba2 2303 	umull	r2, r3, r2, r3
 8000b44:	09db      	lsrs	r3, r3, #7
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	3301      	adds	r3, #1
 8000b4a:	737b      	strb	r3, [r7, #13]
			break;
 8000b4c:	e000      	b.n	8000b50 <vDoI2CIni+0x218>
			break;
 8000b4e:	bf00      	nop
	}

	/* Set TRISE Value */
	psI2CHandle->psI2CBaseAddr->TRICE &= ~(0x3F << 0U);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	6a1a      	ldr	r2, [r3, #32]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8000b5e:	621a      	str	r2, [r3, #32]
	psI2CHandle->psI2CBaseAddr->TRICE |= ((u8TriseValue & 0x3F) << 0U);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	6a19      	ldr	r1, [r3, #32]
 8000b66:	7b7b      	ldrb	r3, [r7, #13]
 8000b68:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	430a      	orrs	r2, r1
 8000b72:	621a      	str	r2, [r3, #32]
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	431bde83 	.word	0x431bde83
 8000b80:	00061a80 	.word	0x00061a80
 8000b84:	000186a0 	.word	0x000186a0
 8000b88:	00030d40 	.word	0x00030d40
 8000b8c:	00044b83 	.word	0x00044b83

08000b90 <vDoI2CMasterSendData>:
 * Return       : void
 * ===========================================================================
 */

void vDoI2CMasterSendData(TS_I2C_HANDLE *psI2CHandle, uint8_t *pu8I2CTxBuff, uint32_t u32I2CDataLen, uint8_t u8SlaveAddr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
 8000b9c:	70fb      	strb	r3, [r7, #3]
	static uint32_t u32I2CLen ;

	/* Generate the Start Condition */
	vDoI2CGenerateStartCondition(psI2CHandle->psI2CBaseAddr);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fe05 	bl	80007b2 <vDoI2CGenerateStartCondition>

	/* Execute Address Phase */
	vDoI2CExecuteAddressPhase(psI2CHandle->psI2CBaseAddr, u8SlaveAddr, I2C_WRITE);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	78f9      	ldrb	r1, [r7, #3]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fe27 	bl	8000804 <vDoI2CExecuteAddressPhase>

	/* Send data */
	for(u32I2CLen = 0; u32I2CLen < u32I2CDataLen ; ++u32I2CLen)
 8000bb6:	4b23      	ldr	r3, [pc, #140]	@ (8000c44 <vDoI2CMasterSendData+0xb4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	e019      	b.n	8000bf2 <vDoI2CMasterSendData+0x62>
	{
		/* Wait until TX buffer is not empty */
		while(!bDoGetI2CFlag(psI2CHandle->psI2CBaseAddr, I2C_TXE_FLAG));
 8000bbe:	bf00      	nop
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2107      	movs	r1, #7
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f83e 	bl	8000c48 <bDoGetI2CFlag>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	f083 0301 	eor.w	r3, r3, #1
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d1f3      	bne.n	8000bc0 <vDoI2CMasterSendData+0x30>

		psI2CHandle->psI2CBaseAddr->DR = *pu8I2CTxBuff;
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	781a      	ldrb	r2, [r3, #0]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	611a      	str	r2, [r3, #16]

		pu8I2CTxBuff++;
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	3301      	adds	r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
	for(u32I2CLen = 0; u32I2CLen < u32I2CDataLen ; ++u32I2CLen)
 8000be8:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <vDoI2CMasterSendData+0xb4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	3301      	adds	r3, #1
 8000bee:	4a15      	ldr	r2, [pc, #84]	@ (8000c44 <vDoI2CMasterSendData+0xb4>)
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	4b14      	ldr	r3, [pc, #80]	@ (8000c44 <vDoI2CMasterSendData+0xb4>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d8e0      	bhi.n	8000bbe <vDoI2CMasterSendData+0x2e>
	}

	/* Wait until TX buffer is not empty */
	while(!bDoGetI2CFlag(psI2CHandle->psI2CBaseAddr, I2C_TXE_FLAG));
 8000bfc:	bf00      	nop
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2107      	movs	r1, #7
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 f81f 	bl	8000c48 <bDoGetI2CFlag>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	f083 0301 	eor.w	r3, r3, #1
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1f3      	bne.n	8000bfe <vDoI2CMasterSendData+0x6e>

	/* Wait until Byte Transfer is not finished */
	while(!bDoGetI2CFlag(psI2CHandle->psI2CBaseAddr, I2C_BTF_FLAG));
 8000c16:	bf00      	nop
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f812 	bl	8000c48 <bDoGetI2CFlag>
 8000c24:	4603      	mov	r3, r0
 8000c26:	f083 0301 	eor.w	r3, r3, #1
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d1f3      	bne.n	8000c18 <vDoI2CMasterSendData+0x88>

	/* Generate the Stop Condition */
	vDoI2CGenerateStopCondition(psI2CHandle->psI2CBaseAddr);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fdd6 	bl	80007e6 <vDoI2CGenerateStopCondition>
}
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2000001c 	.word	0x2000001c

08000c48 <bDoGetI2CFlag>:
 * Return       : boolean - Status of flag
 * ===========================================================================
 */

bool bDoGetI2CFlag(TS_I2C_REG_DEF *psI2C, uint32_t u32I2CFlag)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
	return ((psI2C->SR[(u32I2CFlag / 16)] & (0x01 << (u32I2CFlag % 16))) != 0x00);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	091b      	lsrs	r3, r3, #4
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	4413      	add	r3, r2
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	f002 020f 	and.w	r2, r2, #15
 8000c66:	2101      	movs	r1, #1
 8000c68:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	bf14      	ite	ne
 8000c72:	2301      	movne	r3, #1
 8000c74:	2300      	moveq	r3, #0
 8000c76:	b2db      	uxtb	r3, r3
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
	...

08000c84 <delay>:

#include <string.h>
#include "stm32f401xx.h"

void delay(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1000000; ++i) {
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	e002      	b.n	8000c96 <delay+0x12>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3301      	adds	r3, #1
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a04      	ldr	r2, [pc, #16]	@ (8000cac <delay+0x28>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	ddf8      	ble.n	8000c90 <delay+0xc>
		;
	}
}
 8000c9e:	bf00      	nop
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	000f423f 	.word	0x000f423f

08000cb0 <vDoI2CGpioConf>:

static inline void vDoI2CGpioConf(void);

static inline void vDoI2CGpioConf(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
	TS_GPIO_CONFIG sGpioI2C1SclConf;
	sGpioI2C1SclConf.u8GpioPinNum = GPIO_PIN_NUM_8;
 8000cb6:	2308      	movs	r3, #8
 8000cb8:	763b      	strb	r3, [r7, #24]
	sGpioI2C1SclConf.u8GpioPinMode = GPIO_MODE_ALT_FUNC;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	767b      	strb	r3, [r7, #25]
	sGpioI2C1SclConf.u8GpioPinAltFunMode = GPIO_AF_NUM_4;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	777b      	strb	r3, [r7, #29]
	sGpioI2C1SclConf.u8GpioPinOPType = GPIO_OUT_MODE_OD;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	773b      	strb	r3, [r7, #28]
	sGpioI2C1SclConf.u8GpioPinPuPdControl = GPIO_PUPD_PU;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	76fb      	strb	r3, [r7, #27]
	sGpioI2C1SclConf.u8GpioPinSpeed = GPIO_OUT_SPEED_VERY_HIGH;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	76bb      	strb	r3, [r7, #26]

	TS_GPIO_CONFIG sGpioI2C1SdaConf;
	sGpioI2C1SdaConf.u8GpioPinNum = GPIO_PIN_NUM_9;
 8000cce:	2309      	movs	r3, #9
 8000cd0:	743b      	strb	r3, [r7, #16]
	sGpioI2C1SdaConf.u8GpioPinMode = GPIO_MODE_ALT_FUNC;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	747b      	strb	r3, [r7, #17]
	sGpioI2C1SclConf.u8GpioPinAltFunMode = GPIO_AF_NUM_4;
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	777b      	strb	r3, [r7, #29]
	sGpioI2C1SdaConf.u8GpioPinOPType = GPIO_OUT_MODE_OD;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	753b      	strb	r3, [r7, #20]
	sGpioI2C1SdaConf.u8GpioPinPuPdControl = GPIO_PUPD_PU;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	74fb      	strb	r3, [r7, #19]
	sGpioI2C1SdaConf.u8GpioPinSpeed = GPIO_OUT_SPEED_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	74bb      	strb	r3, [r7, #18]

	TS_GPIO_HANDLE sGpioI2C1Scl;
	sGpioI2C1Scl.psGpioBaseAddr = GPIOB;
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <vDoI2CGpioConf+0x6c>)
 8000ce8:	60bb      	str	r3, [r7, #8]
	sGpioI2C1Scl.sGpioPinConfig = &sGpioI2C1SclConf;
 8000cea:	f107 0318 	add.w	r3, r7, #24
 8000cee:	60fb      	str	r3, [r7, #12]

	TS_GPIO_HANDLE sGpioI2C1Sda;
	sGpioI2C1Sda.psGpioBaseAddr = GPIOB;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <vDoI2CGpioConf+0x6c>)
 8000cf2:	603b      	str	r3, [r7, #0]
	sGpioI2C1Sda.sGpioPinConfig = &sGpioI2C1SdaConf;
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	607b      	str	r3, [r7, #4]

	vDoGpioPeriClockControl(GPIOB, true);
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	4807      	ldr	r0, [pc, #28]	@ (8000d1c <vDoI2CGpioConf+0x6c>)
 8000cfe:	f7ff faf3 	bl	80002e8 <vDoGpioPeriClockControl>

	vDoGpioIni(&sGpioI2C1Scl);
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fb8e 	bl	8000428 <vDoGpioIni>
	vDoGpioIni(&sGpioI2C1Sda);
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fb8a 	bl	8000428 <vDoGpioIni>
}
 8000d14:	bf00      	nop
 8000d16:	3720      	adds	r7, #32
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40020400 	.word	0x40020400

08000d20 <main>:


int main(void)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b08b      	sub	sp, #44	@ 0x2c
 8000d24:	af00      	add	r7, sp, #0
	char user_data[] = "Hello world!!!";
 8000d26:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <main+0x6c>)
 8000d28:	f107 0418 	add.w	r4, r7, #24
 8000d2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d2e:	c407      	stmia	r4!, {r0, r1, r2}
 8000d30:	8023      	strh	r3, [r4, #0]
 8000d32:	3402      	adds	r4, #2
 8000d34:	0c1b      	lsrs	r3, r3, #16
 8000d36:	7023      	strb	r3, [r4, #0]

	vDoI2CGpioConf();
 8000d38:	f7ff ffba 	bl	8000cb0 <vDoI2CGpioConf>

	TS_I2C_CONFIG sI2CConf;
	sI2CConf.u328I2CSclSpeed = I2C_SCL_SPEED_SM;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <main+0x70>)
 8000d3e:	60fb      	str	r3, [r7, #12]
	sI2CConf.u16I2CDeviceAddr = 0x77;
 8000d40:	2377      	movs	r3, #119	@ 0x77
 8000d42:	823b      	strh	r3, [r7, #16]
	sI2CConf.u8I2CAddrMode = I2C_ADDR_MODE_7;
 8000d44:	2300      	movs	r3, #0
 8000d46:	74bb      	strb	r3, [r7, #18]
	sI2CConf.u8I2CAckControl = I2C_ACK_CONTROL_ENABLE;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	74fb      	strb	r3, [r7, #19]
	sI2CConf.u8I2CFmDutyCycle = I2C_FM_DUTY_CYCLE_2;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	753b      	strb	r3, [r7, #20]

	TS_I2C_HANDLE sI2CHandle;
	sI2CHandle.psI2CBaseAddr = I2C1;
 8000d50:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <main+0x74>)
 8000d52:	607b      	str	r3, [r7, #4]
	sI2CHandle.psI2CConfig = &sI2CConf;
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	60bb      	str	r3, [r7, #8]

	vDoI2CPeriClockControl(I2C1, true);
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	480d      	ldr	r0, [pc, #52]	@ (8000d94 <main+0x74>)
 8000d5e:	f7ff fd93 	bl	8000888 <vDoI2CPeriClockControl>

	vDoI2CIni(&sI2CHandle);
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fde7 	bl	8000938 <vDoI2CIni>

	while(1)
	{
		vDoI2CMasterSendData(&sI2CHandle, (uint8_t*) user_data, strlen(user_data), 0x44);
 8000d6a:	f107 0318 	add.w	r3, r7, #24
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fa30 	bl	80001d4 <strlen>
 8000d74:	4602      	mov	r2, r0
 8000d76:	f107 0118 	add.w	r1, r7, #24
 8000d7a:	1d38      	adds	r0, r7, #4
 8000d7c:	2344      	movs	r3, #68	@ 0x44
 8000d7e:	f7ff ff07 	bl	8000b90 <vDoI2CMasterSendData>
		delay();
 8000d82:	f7ff ff7f 	bl	8000c84 <delay>
		vDoI2CMasterSendData(&sI2CHandle, (uint8_t*) user_data, strlen(user_data), 0x44);
 8000d86:	bf00      	nop
 8000d88:	e7ef      	b.n	8000d6a <main+0x4a>
 8000d8a:	bf00      	nop
 8000d8c:	08000e4c 	.word	0x08000e4c
 8000d90:	000186a0 	.word	0x000186a0
 8000d94:	40005400 	.word	0x40005400

08000d98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d98:	480d      	ldr	r0, [pc, #52]	@ (8000dd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d9a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d9c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da0:	480c      	ldr	r0, [pc, #48]	@ (8000dd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000da2:	490d      	ldr	r1, [pc, #52]	@ (8000dd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000da4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ddc <LoopForever+0xe>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da8:	e002      	b.n	8000db0 <LoopCopyDataInit>

08000daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dae:	3304      	adds	r3, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db4:	d3f9      	bcc.n	8000daa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db6:	4a0a      	ldr	r2, [pc, #40]	@ (8000de0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000db8:	4c0a      	ldr	r4, [pc, #40]	@ (8000de4 <LoopForever+0x16>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dbc:	e001      	b.n	8000dc2 <LoopFillZerobss>

08000dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc0:	3204      	adds	r2, #4

08000dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc4:	d3fb      	bcc.n	8000dbe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dc6:	f000 f811 	bl	8000dec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dca:	f7ff ffa9 	bl	8000d20 <main>

08000dce <LoopForever>:

LoopForever:
  b LoopForever
 8000dce:	e7fe      	b.n	8000dce <LoopForever>
  ldr   r0, =_estack
 8000dd0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ddc:	08000e6c 	.word	0x08000e6c
  ldr r2, =_sbss
 8000de0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000de4:	20000020 	.word	0x20000020

08000de8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC_IRQHandler>
	...

08000dec <__libc_init_array>:
 8000dec:	b570      	push	{r4, r5, r6, lr}
 8000dee:	4d0d      	ldr	r5, [pc, #52]	@ (8000e24 <__libc_init_array+0x38>)
 8000df0:	4c0d      	ldr	r4, [pc, #52]	@ (8000e28 <__libc_init_array+0x3c>)
 8000df2:	1b64      	subs	r4, r4, r5
 8000df4:	10a4      	asrs	r4, r4, #2
 8000df6:	2600      	movs	r6, #0
 8000df8:	42a6      	cmp	r6, r4
 8000dfa:	d109      	bne.n	8000e10 <__libc_init_array+0x24>
 8000dfc:	4d0b      	ldr	r5, [pc, #44]	@ (8000e2c <__libc_init_array+0x40>)
 8000dfe:	4c0c      	ldr	r4, [pc, #48]	@ (8000e30 <__libc_init_array+0x44>)
 8000e00:	f000 f818 	bl	8000e34 <_init>
 8000e04:	1b64      	subs	r4, r4, r5
 8000e06:	10a4      	asrs	r4, r4, #2
 8000e08:	2600      	movs	r6, #0
 8000e0a:	42a6      	cmp	r6, r4
 8000e0c:	d105      	bne.n	8000e1a <__libc_init_array+0x2e>
 8000e0e:	bd70      	pop	{r4, r5, r6, pc}
 8000e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e14:	4798      	blx	r3
 8000e16:	3601      	adds	r6, #1
 8000e18:	e7ee      	b.n	8000df8 <__libc_init_array+0xc>
 8000e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e1e:	4798      	blx	r3
 8000e20:	3601      	adds	r6, #1
 8000e22:	e7f2      	b.n	8000e0a <__libc_init_array+0x1e>
 8000e24:	08000e64 	.word	0x08000e64
 8000e28:	08000e64 	.word	0x08000e64
 8000e2c:	08000e64 	.word	0x08000e64
 8000e30:	08000e68 	.word	0x08000e68

08000e34 <_init>:
 8000e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e36:	bf00      	nop
 8000e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e3a:	bc08      	pop	{r3}
 8000e3c:	469e      	mov	lr, r3
 8000e3e:	4770      	bx	lr

08000e40 <_fini>:
 8000e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e42:	bf00      	nop
 8000e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e46:	bc08      	pop	{r3}
 8000e48:	469e      	mov	lr, r3
 8000e4a:	4770      	bx	lr
