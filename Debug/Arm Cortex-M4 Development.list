
Arm Cortex-M4 Development.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000730  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008c4  080008cc  000018cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008c4  080008c4  000018cc  2**0
                  CONTENTS
  4 .ARM          00000000  080008c4  080008c4  000018cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008c4  080008cc  000018cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008c4  080008c4  000018c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080008c8  080008c8  000018c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000018cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080008cc  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080008cc  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000cf6  00000000  00000000  000018f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000334  00000000  00000000  000025ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d0  00000000  00000000  00002920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000094  00000000  00000000  000029f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000013f0  00000000  00000000  00002a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e0f  00000000  00000000  00003e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005260  00000000  00000000  00004c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00009ee3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000028c  00000000  00000000  00009f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0000a1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080008ac 	.word	0x080008ac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080008ac 	.word	0x080008ac

080001d4 <u8GetGpioPortCode>:
 * 					TS_GPIO_REG_DEF *psGpioPort - GPIO Port Base Address
 * Return       : uint8_t - GPIO Port code
 * ===========================================================================
 */
static inline uint8_t u8GetGpioPortCode(TS_GPIO_REG_DEF *psGpioPort)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	uint8_t u8GpioPortCode = 0;
 80001dc:	2300      	movs	r3, #0
 80001de:	73fb      	strb	r3, [r7, #15]

	if(psGpioPort == GPIOA)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4a17      	ldr	r2, [pc, #92]	@ (8000240 <u8GetGpioPortCode+0x6c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d102      	bne.n	80001ee <u8GetGpioPortCode+0x1a>
	{
		u8GpioPortCode = 0x00;
 80001e8:	2300      	movs	r3, #0
 80001ea:	73fb      	strb	r3, [r7, #15]
 80001ec:	e021      	b.n	8000232 <u8GetGpioPortCode+0x5e>
	}
	else if (psGpioPort == GPIOB)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	4a14      	ldr	r2, [pc, #80]	@ (8000244 <u8GetGpioPortCode+0x70>)
 80001f2:	4293      	cmp	r3, r2
 80001f4:	d102      	bne.n	80001fc <u8GetGpioPortCode+0x28>
	{
		u8GpioPortCode = 0x01;
 80001f6:	2301      	movs	r3, #1
 80001f8:	73fb      	strb	r3, [r7, #15]
 80001fa:	e01a      	b.n	8000232 <u8GetGpioPortCode+0x5e>
	}
	else if (psGpioPort == GPIOC)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4a12      	ldr	r2, [pc, #72]	@ (8000248 <u8GetGpioPortCode+0x74>)
 8000200:	4293      	cmp	r3, r2
 8000202:	d102      	bne.n	800020a <u8GetGpioPortCode+0x36>
	{
		u8GpioPortCode = 0x02;
 8000204:	2302      	movs	r3, #2
 8000206:	73fb      	strb	r3, [r7, #15]
 8000208:	e013      	b.n	8000232 <u8GetGpioPortCode+0x5e>
	}
	else if (psGpioPort == GPIOD)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a0f      	ldr	r2, [pc, #60]	@ (800024c <u8GetGpioPortCode+0x78>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d102      	bne.n	8000218 <u8GetGpioPortCode+0x44>
	{
		u8GpioPortCode = 0x03;
 8000212:	2303      	movs	r3, #3
 8000214:	73fb      	strb	r3, [r7, #15]
 8000216:	e00c      	b.n	8000232 <u8GetGpioPortCode+0x5e>
	}
	else if (psGpioPort == GPIOE)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4a0d      	ldr	r2, [pc, #52]	@ (8000250 <u8GetGpioPortCode+0x7c>)
 800021c:	4293      	cmp	r3, r2
 800021e:	d102      	bne.n	8000226 <u8GetGpioPortCode+0x52>
	{
		u8GpioPortCode = 0x04;
 8000220:	2304      	movs	r3, #4
 8000222:	73fb      	strb	r3, [r7, #15]
 8000224:	e005      	b.n	8000232 <u8GetGpioPortCode+0x5e>
	}
	else if (psGpioPort == GPIOH)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a0a      	ldr	r2, [pc, #40]	@ (8000254 <u8GetGpioPortCode+0x80>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d101      	bne.n	8000232 <u8GetGpioPortCode+0x5e>
	{
		u8GpioPortCode = 0x07;
 800022e:	2307      	movs	r3, #7
 8000230:	73fb      	strb	r3, [r7, #15]
	}

	return u8GpioPortCode;
 8000232:	7bfb      	ldrb	r3, [r7, #15]
}
 8000234:	4618      	mov	r0, r3
 8000236:	3714      	adds	r7, #20
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	40020000 	.word	0x40020000
 8000244:	40020400 	.word	0x40020400
 8000248:	40020800 	.word	0x40020800
 800024c:	40020c00 	.word	0x40020c00
 8000250:	40021000 	.word	0x40021000
 8000254:	40021c00 	.word	0x40021c00

08000258 <vDoGpioIrqIni>:
 * Return       : void
 * ===========================================================================
 */

static inline void vDoGpioIrqIni(TS_GPIO_HANDLE *psGpioHandle)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	uint8_t u8GpioPin = (psGpioHandle->sGpioPinConfig->u8GpioPinNum & 0x0F);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	f003 030f 	and.w	r3, r3, #15
 800026a:	73fb      	strb	r3, [r7, #15]

	SYSCFG_PCKL_EN();
 800026c:	4b17      	ldr	r3, [pc, #92]	@ (80002cc <vDoGpioIrqIni+0x74>)
 800026e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000270:	4a16      	ldr	r2, [pc, #88]	@ (80002cc <vDoGpioIrqIni+0x74>)
 8000272:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000276:	6453      	str	r3, [r2, #68]	@ 0x44
	SYSCFG->EXTICR[(u8GpioPin / 4)] |= ((u8GetGpioPortCode(psGpioHandle->psGpioBaseAddr) & 0x0F) << ((u8GpioPin * 4U) % 16U));
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4618      	mov	r0, r3
 800027e:	f7ff ffa9 	bl	80001d4 <u8GetGpioPortCode>
 8000282:	4603      	mov	r3, r0
 8000284:	f003 020f 	and.w	r2, r3, #15
 8000288:	7bfb      	ldrb	r3, [r7, #15]
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	f003 030c 	and.w	r3, r3, #12
 8000290:	fa02 f103 	lsl.w	r1, r2, r3
 8000294:	4a0e      	ldr	r2, [pc, #56]	@ (80002d0 <vDoGpioIrqIni+0x78>)
 8000296:	7bfb      	ldrb	r3, [r7, #15]
 8000298:	089b      	lsrs	r3, r3, #2
 800029a:	b2d8      	uxtb	r0, r3
 800029c:	4603      	mov	r3, r0
 800029e:	3302      	adds	r3, #2
 80002a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a4:	460a      	mov	r2, r1
 80002a6:	490a      	ldr	r1, [pc, #40]	@ (80002d0 <vDoGpioIrqIni+0x78>)
 80002a8:	431a      	orrs	r2, r3
 80002aa:	1c83      	adds	r3, r0, #2
 80002ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	EXTI->IMR |= (1 << u8GpioPin);
 80002b0:	4b08      	ldr	r3, [pc, #32]	@ (80002d4 <vDoGpioIrqIni+0x7c>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	7bfa      	ldrb	r2, [r7, #15]
 80002b6:	2101      	movs	r1, #1
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	4611      	mov	r1, r2
 80002be:	4a05      	ldr	r2, [pc, #20]	@ (80002d4 <vDoGpioIrqIni+0x7c>)
 80002c0:	430b      	orrs	r3, r1
 80002c2:	6013      	str	r3, [r2, #0]
}
 80002c4:	bf00      	nop
 80002c6:	3710      	adds	r7, #16
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40023800 	.word	0x40023800
 80002d0:	40013800 	.word	0x40013800
 80002d4:	40013c00 	.word	0x40013c00

080002d8 <vDoGpioPeriClockControl>:
 * 					boolean bState - State of GPIO peripheral clock
 * Return       : void
 * ===========================================================================
 */
void vDoGpioPeriClockControl(TS_GPIO_REG_DEF *psGpioPort, bool bState)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	460b      	mov	r3, r1
 80002e2:	70fb      	strb	r3, [r7, #3]
	if(bState)
 80002e4:	78fb      	ldrb	r3, [r7, #3]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d041      	beq.n	800036e <vDoGpioPeriClockControl+0x96>
	{
		if(psGpioPort == GPIOA)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4a43      	ldr	r2, [pc, #268]	@ (80003fc <vDoGpioPeriClockControl+0x124>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d106      	bne.n	8000300 <vDoGpioPeriClockControl+0x28>
		{
			GPIOA_PCKL_EN();
 80002f2:	4b43      	ldr	r3, [pc, #268]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 80002f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f6:	4a42      	ldr	r2, [pc, #264]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (psGpioPort == GPIOH)
		{
			GPIOH_PCKL_DI();
		}
	}
}
 80002fe:	e077      	b.n	80003f0 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOB)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4a40      	ldr	r2, [pc, #256]	@ (8000404 <vDoGpioPeriClockControl+0x12c>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d106      	bne.n	8000316 <vDoGpioPeriClockControl+0x3e>
			GPIOB_PCKL_EN();
 8000308:	4b3d      	ldr	r3, [pc, #244]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 800030a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030c:	4a3c      	ldr	r2, [pc, #240]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 800030e:	f043 0302 	orr.w	r3, r3, #2
 8000312:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000314:	e06c      	b.n	80003f0 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOC)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4a3b      	ldr	r2, [pc, #236]	@ (8000408 <vDoGpioPeriClockControl+0x130>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d106      	bne.n	800032c <vDoGpioPeriClockControl+0x54>
			GPIOC_PCKL_EN();
 800031e:	4b38      	ldr	r3, [pc, #224]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 8000320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000322:	4a37      	ldr	r2, [pc, #220]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 8000324:	f043 0304 	orr.w	r3, r3, #4
 8000328:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800032a:	e061      	b.n	80003f0 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOD)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a37      	ldr	r2, [pc, #220]	@ (800040c <vDoGpioPeriClockControl+0x134>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d106      	bne.n	8000342 <vDoGpioPeriClockControl+0x6a>
			GPIOD_PCKL_EN();
 8000334:	4b32      	ldr	r3, [pc, #200]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 8000336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000338:	4a31      	ldr	r2, [pc, #196]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 800033a:	f043 0308 	orr.w	r3, r3, #8
 800033e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000340:	e056      	b.n	80003f0 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOE)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a32      	ldr	r2, [pc, #200]	@ (8000410 <vDoGpioPeriClockControl+0x138>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d106      	bne.n	8000358 <vDoGpioPeriClockControl+0x80>
			GPIOE_PCKL_EN();
 800034a:	4b2d      	ldr	r3, [pc, #180]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 800034c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800034e:	4a2c      	ldr	r2, [pc, #176]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 8000350:	f043 0310 	orr.w	r3, r3, #16
 8000354:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000356:	e04b      	b.n	80003f0 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOH)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a2e      	ldr	r2, [pc, #184]	@ (8000414 <vDoGpioPeriClockControl+0x13c>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d147      	bne.n	80003f0 <vDoGpioPeriClockControl+0x118>
			GPIOH_PCKL_EN();
 8000360:	4b27      	ldr	r3, [pc, #156]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000364:	4a26      	ldr	r2, [pc, #152]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 8000366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800036a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800036c:	e040      	b.n	80003f0 <vDoGpioPeriClockControl+0x118>
		if(psGpioPort == GPIOA)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a22      	ldr	r2, [pc, #136]	@ (80003fc <vDoGpioPeriClockControl+0x124>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <vDoGpioPeriClockControl+0xac>
			GPIOA_PCKL_DI();
 8000376:	4b22      	ldr	r3, [pc, #136]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037a:	4a21      	ldr	r2, [pc, #132]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 800037c:	f023 0301 	bic.w	r3, r3, #1
 8000380:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000382:	e035      	b.n	80003f0 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOB)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a1f      	ldr	r2, [pc, #124]	@ (8000404 <vDoGpioPeriClockControl+0x12c>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d106      	bne.n	800039a <vDoGpioPeriClockControl+0xc2>
			GPIOB_PCKL_DI();
 800038c:	4b1c      	ldr	r3, [pc, #112]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000390:	4a1b      	ldr	r2, [pc, #108]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 8000392:	f023 0302 	bic.w	r3, r3, #2
 8000396:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000398:	e02a      	b.n	80003f0 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOC)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a1a      	ldr	r2, [pc, #104]	@ (8000408 <vDoGpioPeriClockControl+0x130>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d106      	bne.n	80003b0 <vDoGpioPeriClockControl+0xd8>
			GPIOC_PCKL_DI();
 80003a2:	4b17      	ldr	r3, [pc, #92]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a6:	4a16      	ldr	r2, [pc, #88]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 80003a8:	f023 0304 	bic.w	r3, r3, #4
 80003ac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ae:	e01f      	b.n	80003f0 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOD)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a16      	ldr	r2, [pc, #88]	@ (800040c <vDoGpioPeriClockControl+0x134>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d106      	bne.n	80003c6 <vDoGpioPeriClockControl+0xee>
			GPIOD_PCKL_DI();
 80003b8:	4b11      	ldr	r3, [pc, #68]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 80003ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003bc:	4a10      	ldr	r2, [pc, #64]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 80003be:	f023 0308 	bic.w	r3, r3, #8
 80003c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003c4:	e014      	b.n	80003f0 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOE)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a11      	ldr	r2, [pc, #68]	@ (8000410 <vDoGpioPeriClockControl+0x138>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d106      	bne.n	80003dc <vDoGpioPeriClockControl+0x104>
			GPIOE_PCKL_DI();
 80003ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 80003d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 80003d4:	f023 0310 	bic.w	r3, r3, #16
 80003d8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003da:	e009      	b.n	80003f0 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOH)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a0d      	ldr	r2, [pc, #52]	@ (8000414 <vDoGpioPeriClockControl+0x13c>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d105      	bne.n	80003f0 <vDoGpioPeriClockControl+0x118>
			GPIOH_PCKL_DI();
 80003e4:	4b06      	ldr	r3, [pc, #24]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 80003e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e8:	4a05      	ldr	r2, [pc, #20]	@ (8000400 <vDoGpioPeriClockControl+0x128>)
 80003ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80003ee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f0:	bf00      	nop
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40020000 	.word	0x40020000
 8000400:	40023800 	.word	0x40023800
 8000404:	40020400 	.word	0x40020400
 8000408:	40020800 	.word	0x40020800
 800040c:	40020c00 	.word	0x40020c00
 8000410:	40021000 	.word	0x40021000
 8000414:	40021c00 	.word	0x40021c00

08000418 <vDoGpioIni>:
 * 					TS_GPIO_HANDLE *psGpioHandle - GPIO Handle structure
 * Return       : void
 * ===========================================================================
 */
void vDoGpioIni(TS_GPIO_HANDLE *psGpioHandle)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	uint8_t u8GpioPin = (psGpioHandle->sGpioPinConfig->u8GpioPinNum & 0x0F);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	f003 030f 	and.w	r3, r3, #15
 800042a:	73fb      	strb	r3, [r7, #15]
	uint8_t u8GpioPinMode = (psGpioHandle->sGpioPinConfig->u8GpioPinMode & 0x07);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	785b      	ldrb	r3, [r3, #1]
 8000432:	f003 0307 	and.w	r3, r3, #7
 8000436:	73bb      	strb	r3, [r7, #14]

	/* Initialize GPIO Pin Mode */
	switch (u8GpioPinMode) {
 8000438:	7bbb      	ldrb	r3, [r7, #14]
 800043a:	2b06      	cmp	r3, #6
 800043c:	d876      	bhi.n	800052c <vDoGpioIni+0x114>
 800043e:	a201      	add	r2, pc, #4	@ (adr r2, 8000444 <vDoGpioIni+0x2c>)
 8000440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000444:	08000461 	.word	0x08000461
 8000448:	08000461 	.word	0x08000461
 800044c:	08000461 	.word	0x08000461
 8000450:	08000461 	.word	0x08000461
 8000454:	08000499 	.word	0x08000499
 8000458:	080004cb 	.word	0x080004cb
 800045c:	080004fd 	.word	0x080004fd
		case GPIO_MODE_IN:
		case GPIO_MODE_OUT:
		case GPIO_MODE_ALT_FUNC:
		case GPIO_MODE_ANALOG:
			psGpioHandle->psGpioBaseAddr->MODER &= ~( 0x03 << (u8GpioPin * 2U));
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	7bfb      	ldrb	r3, [r7, #15]
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	2103      	movs	r1, #3
 800046c:	fa01 f303 	lsl.w	r3, r1, r3
 8000470:	43db      	mvns	r3, r3
 8000472:	4619      	mov	r1, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	400a      	ands	r2, r1
 800047a:	601a      	str	r2, [r3, #0]
			psGpioHandle->psGpioBaseAddr->MODER |= (u8GpioPinMode << (u8GpioPin * 2U));
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	7bb9      	ldrb	r1, [r7, #14]
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	fa01 f303 	lsl.w	r3, r1, r3
 800048c:	4619      	mov	r1, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	430a      	orrs	r2, r1
 8000494:	601a      	str	r2, [r3, #0]
			break;
 8000496:	e04a      	b.n	800052e <vDoGpioIni+0x116>

		case GPIO_MODE_IT_RE:
			EXTI->RTSR |= (1 << u8GpioPin);
 8000498:	4b72      	ldr	r3, [pc, #456]	@ (8000664 <vDoGpioIni+0x24c>)
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	7bfa      	ldrb	r2, [r7, #15]
 800049e:	2101      	movs	r1, #1
 80004a0:	fa01 f202 	lsl.w	r2, r1, r2
 80004a4:	4611      	mov	r1, r2
 80004a6:	4a6f      	ldr	r2, [pc, #444]	@ (8000664 <vDoGpioIni+0x24c>)
 80004a8:	430b      	orrs	r3, r1
 80004aa:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << u8GpioPin);
 80004ac:	4b6d      	ldr	r3, [pc, #436]	@ (8000664 <vDoGpioIni+0x24c>)
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	7bfa      	ldrb	r2, [r7, #15]
 80004b2:	2101      	movs	r1, #1
 80004b4:	fa01 f202 	lsl.w	r2, r1, r2
 80004b8:	43d2      	mvns	r2, r2
 80004ba:	4611      	mov	r1, r2
 80004bc:	4a69      	ldr	r2, [pc, #420]	@ (8000664 <vDoGpioIni+0x24c>)
 80004be:	400b      	ands	r3, r1
 80004c0:	60d3      	str	r3, [r2, #12]

			vDoGpioIrqIni(psGpioHandle);
 80004c2:	6878      	ldr	r0, [r7, #4]
 80004c4:	f7ff fec8 	bl	8000258 <vDoGpioIrqIni>
			break;
 80004c8:	e031      	b.n	800052e <vDoGpioIni+0x116>

		case GPIO_MODE_IT_FE:
			EXTI->FTSR |= (1 << u8GpioPin);
 80004ca:	4b66      	ldr	r3, [pc, #408]	@ (8000664 <vDoGpioIni+0x24c>)
 80004cc:	68db      	ldr	r3, [r3, #12]
 80004ce:	7bfa      	ldrb	r2, [r7, #15]
 80004d0:	2101      	movs	r1, #1
 80004d2:	fa01 f202 	lsl.w	r2, r1, r2
 80004d6:	4611      	mov	r1, r2
 80004d8:	4a62      	ldr	r2, [pc, #392]	@ (8000664 <vDoGpioIni+0x24c>)
 80004da:	430b      	orrs	r3, r1
 80004dc:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << u8GpioPin);
 80004de:	4b61      	ldr	r3, [pc, #388]	@ (8000664 <vDoGpioIni+0x24c>)
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	7bfa      	ldrb	r2, [r7, #15]
 80004e4:	2101      	movs	r1, #1
 80004e6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ea:	43d2      	mvns	r2, r2
 80004ec:	4611      	mov	r1, r2
 80004ee:	4a5d      	ldr	r2, [pc, #372]	@ (8000664 <vDoGpioIni+0x24c>)
 80004f0:	400b      	ands	r3, r1
 80004f2:	6093      	str	r3, [r2, #8]

			vDoGpioIrqIni(psGpioHandle);
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f7ff feaf 	bl	8000258 <vDoGpioIrqIni>
			break;
 80004fa:	e018      	b.n	800052e <vDoGpioIni+0x116>

		case GPIO_MODE_IT_RFE:
			EXTI->RTSR |= (1 << u8GpioPin);
 80004fc:	4b59      	ldr	r3, [pc, #356]	@ (8000664 <vDoGpioIni+0x24c>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	7bfa      	ldrb	r2, [r7, #15]
 8000502:	2101      	movs	r1, #1
 8000504:	fa01 f202 	lsl.w	r2, r1, r2
 8000508:	4611      	mov	r1, r2
 800050a:	4a56      	ldr	r2, [pc, #344]	@ (8000664 <vDoGpioIni+0x24c>)
 800050c:	430b      	orrs	r3, r1
 800050e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << u8GpioPin);
 8000510:	4b54      	ldr	r3, [pc, #336]	@ (8000664 <vDoGpioIni+0x24c>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	7bfa      	ldrb	r2, [r7, #15]
 8000516:	2101      	movs	r1, #1
 8000518:	fa01 f202 	lsl.w	r2, r1, r2
 800051c:	4611      	mov	r1, r2
 800051e:	4a51      	ldr	r2, [pc, #324]	@ (8000664 <vDoGpioIni+0x24c>)
 8000520:	430b      	orrs	r3, r1
 8000522:	60d3      	str	r3, [r2, #12]

			vDoGpioIrqIni(psGpioHandle);
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f7ff fe97 	bl	8000258 <vDoGpioIrqIni>
			break;
 800052a:	e000      	b.n	800052e <vDoGpioIni+0x116>

		default:
			break;
 800052c:	bf00      	nop
	}

	/* Initialize GPIO Pin Speed */
	psGpioHandle->psGpioBaseAddr->OSPEEDR &= ~( 0x03 << (u8GpioPin * 2U));
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	689a      	ldr	r2, [r3, #8]
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	2103      	movs	r1, #3
 800053a:	fa01 f303 	lsl.w	r3, r1, r3
 800053e:	43db      	mvns	r3, r3
 8000540:	4619      	mov	r1, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	400a      	ands	r2, r1
 8000548:	609a      	str	r2, [r3, #8]
	psGpioHandle->psGpioBaseAddr->OSPEEDR |= ((psGpioHandle->sGpioPinConfig->u8GpioPinSpeed & 0x03) << (u8GpioPin * 2U));
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	689a      	ldr	r2, [r3, #8]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	789b      	ldrb	r3, [r3, #2]
 8000556:	f003 0103 	and.w	r1, r3, #3
 800055a:	7bfb      	ldrb	r3, [r7, #15]
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	fa01 f303 	lsl.w	r3, r1, r3
 8000562:	4619      	mov	r1, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	430a      	orrs	r2, r1
 800056a:	609a      	str	r2, [r3, #8]

	/* Initialize GPIO Pin Pull-Up/Pull-Down mode */
	psGpioHandle->psGpioBaseAddr->PUPDR &= ~( 0x03 << (u8GpioPin * 2U));
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	68da      	ldr	r2, [r3, #12]
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	2103      	movs	r1, #3
 8000578:	fa01 f303 	lsl.w	r3, r1, r3
 800057c:	43db      	mvns	r3, r3
 800057e:	4619      	mov	r1, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	400a      	ands	r2, r1
 8000586:	60da      	str	r2, [r3, #12]
	psGpioHandle->psGpioBaseAddr->PUPDR |= ((psGpioHandle->sGpioPinConfig->u8GpioPinPuPdControl & 0x03) << (u8GpioPin * 2U));
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	68da      	ldr	r2, [r3, #12]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	78db      	ldrb	r3, [r3, #3]
 8000594:	f003 0103 	and.w	r1, r3, #3
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	fa01 f303 	lsl.w	r3, r1, r3
 80005a0:	4619      	mov	r1, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	430a      	orrs	r2, r1
 80005a8:	60da      	str	r2, [r3, #12]

	/* Initialize GPIO Pin Output type */
	psGpioHandle->psGpioBaseAddr->OTYPER &= ~( 0x01 << (u8GpioPin * 2U));
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	685a      	ldr	r2, [r3, #4]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	2101      	movs	r1, #1
 80005b6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ba:	43db      	mvns	r3, r3
 80005bc:	4619      	mov	r1, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	400a      	ands	r2, r1
 80005c4:	605a      	str	r2, [r3, #4]
	psGpioHandle->psGpioBaseAddr->OTYPER |= ((psGpioHandle->sGpioPinConfig->u8GpioPinOPType & 0x01) << u8GpioPin);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	685a      	ldr	r2, [r3, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	791b      	ldrb	r3, [r3, #4]
 80005d2:	f003 0101 	and.w	r1, r3, #1
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	fa01 f303 	lsl.w	r3, r1, r3
 80005dc:	4619      	mov	r1, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	430a      	orrs	r2, r1
 80005e4:	605a      	str	r2, [r3, #4]

	/* Initialize GPIO Pin Alternate functions mode */
	if(psGpioHandle->sGpioPinConfig->u8GpioPinMode == (uint8_t)GPIO_MODE_ALT_FUNC)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	785b      	ldrb	r3, [r3, #1]
 80005ec:	2b02      	cmp	r3, #2
 80005ee:	d134      	bne.n	800065a <vDoGpioIni+0x242>
	{
		psGpioHandle->psGpioBaseAddr->AFR[(u8GpioPin / 8U)] &= ~(( 0x0F << (u8GpioPin * 4U) % 32U));
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	7bfa      	ldrb	r2, [r7, #15]
 80005f6:	08d2      	lsrs	r2, r2, #3
 80005f8:	b2d0      	uxtb	r0, r2
 80005fa:	4602      	mov	r2, r0
 80005fc:	3208      	adds	r2, #8
 80005fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	f003 031c 	and.w	r3, r3, #28
 800060a:	210f      	movs	r1, #15
 800060c:	fa01 f303 	lsl.w	r3, r1, r3
 8000610:	43db      	mvns	r3, r3
 8000612:	4619      	mov	r1, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4011      	ands	r1, r2
 800061a:	f100 0208 	add.w	r2, r0, #8
 800061e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		psGpioHandle->psGpioBaseAddr->AFR[(u8GpioPin / 8U)] |= ((psGpioHandle->sGpioPinConfig->u8GpioPinAltFunMode & 0x0F) << ((u8GpioPin * 4U) % 32U));
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	7bfa      	ldrb	r2, [r7, #15]
 8000628:	08d2      	lsrs	r2, r2, #3
 800062a:	b2d0      	uxtb	r0, r2
 800062c:	4602      	mov	r2, r0
 800062e:	3208      	adds	r2, #8
 8000630:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	795b      	ldrb	r3, [r3, #5]
 800063a:	f003 010f 	and.w	r1, r3, #15
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	f003 031c 	and.w	r3, r3, #28
 8000646:	fa01 f303 	lsl.w	r3, r1, r3
 800064a:	4619      	mov	r1, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4311      	orrs	r1, r2
 8000652:	f100 0208 	add.w	r2, r0, #8
 8000656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40013c00 	.word	0x40013c00

08000668 <vDoGpioTogglePin>:
 * 					uint8_t u8GpioPin - Toggled GPIO Pin
 * Return       : void
 * ===========================================================================
 */
void vDoGpioTogglePin(TS_GPIO_REG_DEF *psGpioPort, uint8_t u8GpioPin)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	460b      	mov	r3, r1
 8000672:	70fb      	strb	r3, [r7, #3]
	psGpioPort->ODR ^= (1 << (u8GpioPin & 0x0F));
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	78fa      	ldrb	r2, [r7, #3]
 800067a:	f002 020f 	and.w	r2, r2, #15
 800067e:	2101      	movs	r1, #1
 8000680:	fa01 f202 	lsl.w	r2, r1, r2
 8000684:	405a      	eors	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	615a      	str	r2, [r3, #20]
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr

08000694 <vDoGpioIrqConfig>:
 * 					boolean bIqrState - State of IQR
 * Return       : void
 * ===========================================================================
 */
void vDoGpioIrqConfig(TS_NVIC_REG_DEF *psNvic, uint8_t u8IrqNumber, uint8_t u8IrqPriority, bool bIqrState)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	4608      	mov	r0, r1
 800069e:	4611      	mov	r1, r2
 80006a0:	461a      	mov	r2, r3
 80006a2:	4603      	mov	r3, r0
 80006a4:	70fb      	strb	r3, [r7, #3]
 80006a6:	460b      	mov	r3, r1
 80006a8:	70bb      	strb	r3, [r7, #2]
 80006aa:	4613      	mov	r3, r2
 80006ac:	707b      	strb	r3, [r7, #1]
	if(bIqrState)
 80006ae:	787b      	ldrb	r3, [r7, #1]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d012      	beq.n	80006da <vDoGpioIrqConfig+0x46>
	{
		psNvic->ISER[(u8IrqNumber / 32U)] |= (1 << u8IrqNumber % 32U);
 80006b4:	78fb      	ldrb	r3, [r7, #3]
 80006b6:	095b      	lsrs	r3, r3, #5
 80006b8:	b2d8      	uxtb	r0, r3
 80006ba:	4602      	mov	r2, r0
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006c2:	78fa      	ldrb	r2, [r7, #3]
 80006c4:	f002 021f 	and.w	r2, r2, #31
 80006c8:	2101      	movs	r1, #1
 80006ca:	fa01 f202 	lsl.w	r2, r1, r2
 80006ce:	4601      	mov	r1, r0
 80006d0:	431a      	orrs	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80006d8:	e012      	b.n	8000700 <vDoGpioIrqConfig+0x6c>
	}
	else
	{
		psNvic->ISER[(u8IrqNumber / 32U)] &= ~(1 << u8IrqNumber % 32U);
 80006da:	78fb      	ldrb	r3, [r7, #3]
 80006dc:	095b      	lsrs	r3, r3, #5
 80006de:	b2d8      	uxtb	r0, r3
 80006e0:	4602      	mov	r2, r0
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006e8:	78fa      	ldrb	r2, [r7, #3]
 80006ea:	f002 021f 	and.w	r2, r2, #31
 80006ee:	2101      	movs	r1, #1
 80006f0:	fa01 f202 	lsl.w	r2, r1, r2
 80006f4:	43d2      	mvns	r2, r2
 80006f6:	4601      	mov	r1, r0
 80006f8:	401a      	ands	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	}

	psNvic->IPR[u8IrqNumber / 4U] |= (u8IrqPriority << ((u8IrqNumber % 4U) * 4)) ;
 8000700:	78fb      	ldrb	r3, [r7, #3]
 8000702:	089b      	lsrs	r3, r3, #2
 8000704:	b2d8      	uxtb	r0, r3
 8000706:	4602      	mov	r2, r0
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	32c0      	adds	r2, #192	@ 0xc0
 800070c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000710:	78b9      	ldrb	r1, [r7, #2]
 8000712:	78fa      	ldrb	r2, [r7, #3]
 8000714:	f002 0203 	and.w	r2, r2, #3
 8000718:	0092      	lsls	r2, r2, #2
 800071a:	fa01 f202 	lsl.w	r2, r1, r2
 800071e:	4611      	mov	r1, r2
 8000720:	4602      	mov	r2, r0
 8000722:	4319      	orrs	r1, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	32c0      	adds	r2, #192	@ 0xc0
 8000728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <vDoGpioIrqHandling>:
 * 					uint8_t u8GpioPin - GPIO Pin to be handled
 * Return       : void
 * ===========================================================================
 */
void vDoGpioIrqHandling(TS_EXTI_REG_DEF *psExti, uint8_t u8GpioPin)
{
 8000736:	b480      	push	{r7}
 8000738:	b083      	sub	sp, #12
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
 800073e:	460b      	mov	r3, r1
 8000740:	70fb      	strb	r3, [r7, #3]
	if(psExti->PR & (1 << u8GpioPin))
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	78fa      	ldrb	r2, [r7, #3]
 8000748:	2101      	movs	r1, #1
 800074a:	fa01 f202 	lsl.w	r2, r1, r2
 800074e:	4013      	ands	r3, r2
 8000750:	2b00      	cmp	r3, #0
 8000752:	d008      	beq.n	8000766 <vDoGpioIrqHandling+0x30>
	{
		psExti->PR |= (1 << u8GpioPin);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	695b      	ldr	r3, [r3, #20]
 8000758:	78fa      	ldrb	r2, [r7, #3]
 800075a:	2101      	movs	r1, #1
 800075c:	fa01 f202 	lsl.w	r2, r1, r2
 8000760:	431a      	orrs	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	615a      	str	r2, [r3, #20]
	}
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <main>:
		;
	}
}

int main(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
	TS_GPIO_CONFIG sGpioKeyConf;
	sGpioKeyConf.u8GpioPinNum = 0U;
 8000776:	2300      	movs	r3, #0
 8000778:	763b      	strb	r3, [r7, #24]
	sGpioKeyConf.u8GpioPinMode = GPIO_MODE_IT_FE;
 800077a:	2305      	movs	r3, #5
 800077c:	767b      	strb	r3, [r7, #25]
	sGpioKeyConf.u8GpioPinOPType = GPIO_OUT_MODE_PP;
 800077e:	2300      	movs	r3, #0
 8000780:	773b      	strb	r3, [r7, #28]
	sGpioKeyConf.u8GpioPinPuPdControl = GPIO_PUPD_PU;
 8000782:	2301      	movs	r3, #1
 8000784:	76fb      	strb	r3, [r7, #27]
	sGpioKeyConf.u8GpioPinSpeed = GPIO_OUT_SPEED_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	76bb      	strb	r3, [r7, #26]

	TS_GPIO_CONFIG sGpioLedConf;
	sGpioLedConf.u8GpioPinNum = 13U;
 800078a:	230d      	movs	r3, #13
 800078c:	743b      	strb	r3, [r7, #16]
	sGpioLedConf.u8GpioPinMode = GPIO_MODE_OUT;
 800078e:	2301      	movs	r3, #1
 8000790:	747b      	strb	r3, [r7, #17]
	sGpioLedConf.u8GpioPinOPType = GPIO_OUT_MODE_PP;
 8000792:	2300      	movs	r3, #0
 8000794:	753b      	strb	r3, [r7, #20]
	sGpioLedConf.u8GpioPinPuPdControl = GPIO_PUPD_NU_ND;
 8000796:	2300      	movs	r3, #0
 8000798:	74fb      	strb	r3, [r7, #19]
	sGpioLedConf.u8GpioPinSpeed = GPIO_OUT_SPEED_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	74bb      	strb	r3, [r7, #18]

	TS_GPIO_HANDLE sGpioKey;
	sGpioKey.psGpioBaseAddr = GPIOA;
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <main+0x74>)
 80007a0:	60bb      	str	r3, [r7, #8]
	sGpioKey.sGpioPinConfig = &sGpioKeyConf;
 80007a2:	f107 0318 	add.w	r3, r7, #24
 80007a6:	60fb      	str	r3, [r7, #12]

	TS_GPIO_HANDLE sGpioLed;
	sGpioLed.psGpioBaseAddr = GPIOC;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <main+0x78>)
 80007aa:	603b      	str	r3, [r7, #0]
	sGpioLed.sGpioPinConfig = &sGpioLedConf;
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	607b      	str	r3, [r7, #4]

	vDoGpioPeriClockControl(GPIOA, true);
 80007b2:	2101      	movs	r1, #1
 80007b4:	480b      	ldr	r0, [pc, #44]	@ (80007e4 <main+0x74>)
 80007b6:	f7ff fd8f 	bl	80002d8 <vDoGpioPeriClockControl>
	vDoGpioPeriClockControl(GPIOC, true);
 80007ba:	2101      	movs	r1, #1
 80007bc:	480a      	ldr	r0, [pc, #40]	@ (80007e8 <main+0x78>)
 80007be:	f7ff fd8b 	bl	80002d8 <vDoGpioPeriClockControl>

	vDoGpioIni(&sGpioKey);
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fe26 	bl	8000418 <vDoGpioIni>
	vDoGpioIni(&sGpioLed);
 80007cc:	463b      	mov	r3, r7
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fe22 	bl	8000418 <vDoGpioIni>

	vDoGpioIrqConfig(NVIC, IRQ_NO_EXTI0, NVIC_IRQ_PRI15, true);
 80007d4:	2301      	movs	r3, #1
 80007d6:	220f      	movs	r2, #15
 80007d8:	2106      	movs	r1, #6
 80007da:	4804      	ldr	r0, [pc, #16]	@ (80007ec <main+0x7c>)
 80007dc:	f7ff ff5a 	bl	8000694 <vDoGpioIrqConfig>

	while(1);
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <main+0x70>
 80007e4:	40020000 	.word	0x40020000
 80007e8:	40020800 	.word	0x40020800
 80007ec:	e000e100 	.word	0xe000e100

080007f0 <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler(void){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	vDoGpioIrqHandling(EXTI, GPIO_PIN_NUM_0);
 80007f4:	2100      	movs	r1, #0
 80007f6:	4804      	ldr	r0, [pc, #16]	@ (8000808 <EXTI0_IRQHandler+0x18>)
 80007f8:	f7ff ff9d 	bl	8000736 <vDoGpioIrqHandling>

	vDoGpioTogglePin(GPIOC, 13U);
 80007fc:	210d      	movs	r1, #13
 80007fe:	4803      	ldr	r0, [pc, #12]	@ (800080c <EXTI0_IRQHandler+0x1c>)
 8000800:	f7ff ff32 	bl	8000668 <vDoGpioTogglePin>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40013c00 	.word	0x40013c00
 800080c:	40020800 	.word	0x40020800

08000810 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000810:	480d      	ldr	r0, [pc, #52]	@ (8000848 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000812:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000814:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000818:	480c      	ldr	r0, [pc, #48]	@ (800084c <LoopForever+0x6>)
  ldr r1, =_edata
 800081a:	490d      	ldr	r1, [pc, #52]	@ (8000850 <LoopForever+0xa>)
  ldr r2, =_sidata
 800081c:	4a0d      	ldr	r2, [pc, #52]	@ (8000854 <LoopForever+0xe>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000820:	e002      	b.n	8000828 <LoopCopyDataInit>

08000822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000826:	3304      	adds	r3, #4

08000828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800082c:	d3f9      	bcc.n	8000822 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082e:	4a0a      	ldr	r2, [pc, #40]	@ (8000858 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000830:	4c0a      	ldr	r4, [pc, #40]	@ (800085c <LoopForever+0x16>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000834:	e001      	b.n	800083a <LoopFillZerobss>

08000836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000838:	3204      	adds	r2, #4

0800083a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800083c:	d3fb      	bcc.n	8000836 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800083e:	f000 f811 	bl	8000864 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000842:	f7ff ff95 	bl	8000770 <main>

08000846 <LoopForever>:

LoopForever:
  b LoopForever
 8000846:	e7fe      	b.n	8000846 <LoopForever>
  ldr   r0, =_estack
 8000848:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800084c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000850:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000854:	080008cc 	.word	0x080008cc
  ldr r2, =_sbss
 8000858:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800085c:	2000001c 	.word	0x2000001c

08000860 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000860:	e7fe      	b.n	8000860 <ADC_IRQHandler>
	...

08000864 <__libc_init_array>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	4d0d      	ldr	r5, [pc, #52]	@ (800089c <__libc_init_array+0x38>)
 8000868:	4c0d      	ldr	r4, [pc, #52]	@ (80008a0 <__libc_init_array+0x3c>)
 800086a:	1b64      	subs	r4, r4, r5
 800086c:	10a4      	asrs	r4, r4, #2
 800086e:	2600      	movs	r6, #0
 8000870:	42a6      	cmp	r6, r4
 8000872:	d109      	bne.n	8000888 <__libc_init_array+0x24>
 8000874:	4d0b      	ldr	r5, [pc, #44]	@ (80008a4 <__libc_init_array+0x40>)
 8000876:	4c0c      	ldr	r4, [pc, #48]	@ (80008a8 <__libc_init_array+0x44>)
 8000878:	f000 f818 	bl	80008ac <_init>
 800087c:	1b64      	subs	r4, r4, r5
 800087e:	10a4      	asrs	r4, r4, #2
 8000880:	2600      	movs	r6, #0
 8000882:	42a6      	cmp	r6, r4
 8000884:	d105      	bne.n	8000892 <__libc_init_array+0x2e>
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f855 3b04 	ldr.w	r3, [r5], #4
 800088c:	4798      	blx	r3
 800088e:	3601      	adds	r6, #1
 8000890:	e7ee      	b.n	8000870 <__libc_init_array+0xc>
 8000892:	f855 3b04 	ldr.w	r3, [r5], #4
 8000896:	4798      	blx	r3
 8000898:	3601      	adds	r6, #1
 800089a:	e7f2      	b.n	8000882 <__libc_init_array+0x1e>
 800089c:	080008c4 	.word	0x080008c4
 80008a0:	080008c4 	.word	0x080008c4
 80008a4:	080008c4 	.word	0x080008c4
 80008a8:	080008c8 	.word	0x080008c8

080008ac <_init>:
 80008ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ae:	bf00      	nop
 80008b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008b2:	bc08      	pop	{r3}
 80008b4:	469e      	mov	lr, r3
 80008b6:	4770      	bx	lr

080008b8 <_fini>:
 80008b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ba:	bf00      	nop
 80008bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008be:	bc08      	pop	{r3}
 80008c0:	469e      	mov	lr, r3
 80008c2:	4770      	bx	lr
