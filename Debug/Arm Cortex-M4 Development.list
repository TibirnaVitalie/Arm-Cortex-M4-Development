
Arm Cortex-M4 Development.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000db8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000f4c  08000f4c  00001f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f5c  08000f5c  00001f6c  2**0
                  CONTENTS
  4 .ARM          00000008  08000f5c  08000f5c  00001f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000f64  08000f6c  00001f6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f64  08000f64  00001f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f68  08000f68  00001f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001f6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000f6c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000f6c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00001f6c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a41  00000000  00000000  00001f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005cb  00000000  00000000  000039d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  00003fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000122  00000000  00000000  00004130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002196  00000000  00000000  00004252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001aaa  00000000  00000000  000063e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008e81  00000000  00000000  00007e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00010d13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005a8  00000000  00000000  00010d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00011300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000f34 	.word	0x08000f34

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000f34 	.word	0x08000f34

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <u8GetGpioPortCode>:
 * 					TS_GPIO_REG_DEF *psGpioPort - GPIO Port Base Address
 * Return       : uint8_t - GPIO Port code
 * ===========================================================================
 */
static inline uint8_t u8GetGpioPortCode(TS_GPIO_REG_DEF *psGpioPort)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
	uint8_t u8GpioPortCode = 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	73fb      	strb	r3, [r7, #15]

	if(psGpioPort == GPIOA)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	4a17      	ldr	r2, [pc, #92]	@ (8000250 <u8GetGpioPortCode+0x6c>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d102      	bne.n	80001fe <u8GetGpioPortCode+0x1a>
	{
		u8GpioPortCode = 0x00;
 80001f8:	2300      	movs	r3, #0
 80001fa:	73fb      	strb	r3, [r7, #15]
 80001fc:	e021      	b.n	8000242 <u8GetGpioPortCode+0x5e>
	}
	else if (psGpioPort == GPIOB)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4a14      	ldr	r2, [pc, #80]	@ (8000254 <u8GetGpioPortCode+0x70>)
 8000202:	4293      	cmp	r3, r2
 8000204:	d102      	bne.n	800020c <u8GetGpioPortCode+0x28>
	{
		u8GpioPortCode = 0x01;
 8000206:	2301      	movs	r3, #1
 8000208:	73fb      	strb	r3, [r7, #15]
 800020a:	e01a      	b.n	8000242 <u8GetGpioPortCode+0x5e>
	}
	else if (psGpioPort == GPIOC)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	4a12      	ldr	r2, [pc, #72]	@ (8000258 <u8GetGpioPortCode+0x74>)
 8000210:	4293      	cmp	r3, r2
 8000212:	d102      	bne.n	800021a <u8GetGpioPortCode+0x36>
	{
		u8GpioPortCode = 0x02;
 8000214:	2302      	movs	r3, #2
 8000216:	73fb      	strb	r3, [r7, #15]
 8000218:	e013      	b.n	8000242 <u8GetGpioPortCode+0x5e>
	}
	else if (psGpioPort == GPIOD)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4a0f      	ldr	r2, [pc, #60]	@ (800025c <u8GetGpioPortCode+0x78>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d102      	bne.n	8000228 <u8GetGpioPortCode+0x44>
	{
		u8GpioPortCode = 0x03;
 8000222:	2303      	movs	r3, #3
 8000224:	73fb      	strb	r3, [r7, #15]
 8000226:	e00c      	b.n	8000242 <u8GetGpioPortCode+0x5e>
	}
	else if (psGpioPort == GPIOE)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4a0d      	ldr	r2, [pc, #52]	@ (8000260 <u8GetGpioPortCode+0x7c>)
 800022c:	4293      	cmp	r3, r2
 800022e:	d102      	bne.n	8000236 <u8GetGpioPortCode+0x52>
	{
		u8GpioPortCode = 0x04;
 8000230:	2304      	movs	r3, #4
 8000232:	73fb      	strb	r3, [r7, #15]
 8000234:	e005      	b.n	8000242 <u8GetGpioPortCode+0x5e>
	}
	else if (psGpioPort == GPIOH)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4a0a      	ldr	r2, [pc, #40]	@ (8000264 <u8GetGpioPortCode+0x80>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d101      	bne.n	8000242 <u8GetGpioPortCode+0x5e>
	{
		u8GpioPortCode = 0x07;
 800023e:	2307      	movs	r3, #7
 8000240:	73fb      	strb	r3, [r7, #15]
	}

	return u8GpioPortCode;
 8000242:	7bfb      	ldrb	r3, [r7, #15]
}
 8000244:	4618      	mov	r0, r3
 8000246:	3714      	adds	r7, #20
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	40020000 	.word	0x40020000
 8000254:	40020400 	.word	0x40020400
 8000258:	40020800 	.word	0x40020800
 800025c:	40020c00 	.word	0x40020c00
 8000260:	40021000 	.word	0x40021000
 8000264:	40021c00 	.word	0x40021c00

08000268 <vDoGpioIrqIni>:
 * Return       : void
 * ===========================================================================
 */

static inline void vDoGpioIrqIni(TS_GPIO_HANDLE *psGpioHandle)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	uint8_t u8GpioPin = (psGpioHandle->sGpioPinConfig->u8GpioPinNum & 0x0F);
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	f003 030f 	and.w	r3, r3, #15
 800027a:	73fb      	strb	r3, [r7, #15]

	SYSCFG_PCKL_EN();
 800027c:	4b17      	ldr	r3, [pc, #92]	@ (80002dc <vDoGpioIrqIni+0x74>)
 800027e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000280:	4a16      	ldr	r2, [pc, #88]	@ (80002dc <vDoGpioIrqIni+0x74>)
 8000282:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000286:	6453      	str	r3, [r2, #68]	@ 0x44
	SYSCFG->EXTICR[(u8GpioPin / 4)] |= ((u8GetGpioPortCode(psGpioHandle->psGpioBaseAddr) & 0x0F) << ((u8GpioPin * 4U) % 16U));
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4618      	mov	r0, r3
 800028e:	f7ff ffa9 	bl	80001e4 <u8GetGpioPortCode>
 8000292:	4603      	mov	r3, r0
 8000294:	f003 020f 	and.w	r2, r3, #15
 8000298:	7bfb      	ldrb	r3, [r7, #15]
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	f003 030c 	and.w	r3, r3, #12
 80002a0:	fa02 f103 	lsl.w	r1, r2, r3
 80002a4:	4a0e      	ldr	r2, [pc, #56]	@ (80002e0 <vDoGpioIrqIni+0x78>)
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
 80002a8:	089b      	lsrs	r3, r3, #2
 80002aa:	b2d8      	uxtb	r0, r3
 80002ac:	4603      	mov	r3, r0
 80002ae:	3302      	adds	r3, #2
 80002b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b4:	460a      	mov	r2, r1
 80002b6:	490a      	ldr	r1, [pc, #40]	@ (80002e0 <vDoGpioIrqIni+0x78>)
 80002b8:	431a      	orrs	r2, r3
 80002ba:	1c83      	adds	r3, r0, #2
 80002bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	EXTI->IMR |= (1 << u8GpioPin);
 80002c0:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <vDoGpioIrqIni+0x7c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	7bfa      	ldrb	r2, [r7, #15]
 80002c6:	2101      	movs	r1, #1
 80002c8:	fa01 f202 	lsl.w	r2, r1, r2
 80002cc:	4611      	mov	r1, r2
 80002ce:	4a05      	ldr	r2, [pc, #20]	@ (80002e4 <vDoGpioIrqIni+0x7c>)
 80002d0:	430b      	orrs	r3, r1
 80002d2:	6013      	str	r3, [r2, #0]
}
 80002d4:	bf00      	nop
 80002d6:	3710      	adds	r7, #16
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40023800 	.word	0x40023800
 80002e0:	40013800 	.word	0x40013800
 80002e4:	40013c00 	.word	0x40013c00

080002e8 <vDoGpioPeriClockControl>:
 * 					boolean bState - State of GPIO peripheral clock
 * Return       : void
 * ===========================================================================
 */
void vDoGpioPeriClockControl(TS_GPIO_REG_DEF *psGpioPort, bool bState)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	460b      	mov	r3, r1
 80002f2:	70fb      	strb	r3, [r7, #3]
	if(bState)
 80002f4:	78fb      	ldrb	r3, [r7, #3]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d041      	beq.n	800037e <vDoGpioPeriClockControl+0x96>
	{
		if(psGpioPort == GPIOA)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4a43      	ldr	r2, [pc, #268]	@ (800040c <vDoGpioPeriClockControl+0x124>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d106      	bne.n	8000310 <vDoGpioPeriClockControl+0x28>
		{
			GPIOA_PCKL_EN();
 8000302:	4b43      	ldr	r3, [pc, #268]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 8000304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000306:	4a42      	ldr	r2, [pc, #264]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 8000308:	f043 0301 	orr.w	r3, r3, #1
 800030c:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (psGpioPort == GPIOH)
		{
			GPIOH_PCKL_DI();
		}
	}
}
 800030e:	e077      	b.n	8000400 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOB)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	4a40      	ldr	r2, [pc, #256]	@ (8000414 <vDoGpioPeriClockControl+0x12c>)
 8000314:	4293      	cmp	r3, r2
 8000316:	d106      	bne.n	8000326 <vDoGpioPeriClockControl+0x3e>
			GPIOB_PCKL_EN();
 8000318:	4b3d      	ldr	r3, [pc, #244]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 800031a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800031c:	4a3c      	ldr	r2, [pc, #240]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 800031e:	f043 0302 	orr.w	r3, r3, #2
 8000322:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000324:	e06c      	b.n	8000400 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOC)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4a3b      	ldr	r2, [pc, #236]	@ (8000418 <vDoGpioPeriClockControl+0x130>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d106      	bne.n	800033c <vDoGpioPeriClockControl+0x54>
			GPIOC_PCKL_EN();
 800032e:	4b38      	ldr	r3, [pc, #224]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 8000330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000332:	4a37      	ldr	r2, [pc, #220]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 8000334:	f043 0304 	orr.w	r3, r3, #4
 8000338:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800033a:	e061      	b.n	8000400 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOD)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4a37      	ldr	r2, [pc, #220]	@ (800041c <vDoGpioPeriClockControl+0x134>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d106      	bne.n	8000352 <vDoGpioPeriClockControl+0x6a>
			GPIOD_PCKL_EN();
 8000344:	4b32      	ldr	r3, [pc, #200]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000348:	4a31      	ldr	r2, [pc, #196]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 800034a:	f043 0308 	orr.w	r3, r3, #8
 800034e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000350:	e056      	b.n	8000400 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOE)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a32      	ldr	r2, [pc, #200]	@ (8000420 <vDoGpioPeriClockControl+0x138>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d106      	bne.n	8000368 <vDoGpioPeriClockControl+0x80>
			GPIOE_PCKL_EN();
 800035a:	4b2d      	ldr	r3, [pc, #180]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 800035c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800035e:	4a2c      	ldr	r2, [pc, #176]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 8000360:	f043 0310 	orr.w	r3, r3, #16
 8000364:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000366:	e04b      	b.n	8000400 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOH)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a2e      	ldr	r2, [pc, #184]	@ (8000424 <vDoGpioPeriClockControl+0x13c>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d147      	bne.n	8000400 <vDoGpioPeriClockControl+0x118>
			GPIOH_PCKL_EN();
 8000370:	4b27      	ldr	r3, [pc, #156]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 8000372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000374:	4a26      	ldr	r2, [pc, #152]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 8000376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800037a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800037c:	e040      	b.n	8000400 <vDoGpioPeriClockControl+0x118>
		if(psGpioPort == GPIOA)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a22      	ldr	r2, [pc, #136]	@ (800040c <vDoGpioPeriClockControl+0x124>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <vDoGpioPeriClockControl+0xac>
			GPIOA_PCKL_DI();
 8000386:	4b22      	ldr	r3, [pc, #136]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038a:	4a21      	ldr	r2, [pc, #132]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 800038c:	f023 0301 	bic.w	r3, r3, #1
 8000390:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000392:	e035      	b.n	8000400 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOB)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a1f      	ldr	r2, [pc, #124]	@ (8000414 <vDoGpioPeriClockControl+0x12c>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d106      	bne.n	80003aa <vDoGpioPeriClockControl+0xc2>
			GPIOB_PCKL_DI();
 800039c:	4b1c      	ldr	r3, [pc, #112]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 800039e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 80003a2:	f023 0302 	bic.w	r3, r3, #2
 80003a6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a8:	e02a      	b.n	8000400 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOC)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000418 <vDoGpioPeriClockControl+0x130>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <vDoGpioPeriClockControl+0xd8>
			GPIOC_PCKL_DI();
 80003b2:	4b17      	ldr	r3, [pc, #92]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b6:	4a16      	ldr	r2, [pc, #88]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 80003b8:	f023 0304 	bic.w	r3, r3, #4
 80003bc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003be:	e01f      	b.n	8000400 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOD)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a16      	ldr	r2, [pc, #88]	@ (800041c <vDoGpioPeriClockControl+0x134>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <vDoGpioPeriClockControl+0xee>
			GPIOD_PCKL_DI();
 80003c8:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003cc:	4a10      	ldr	r2, [pc, #64]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 80003ce:	f023 0308 	bic.w	r3, r3, #8
 80003d2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d4:	e014      	b.n	8000400 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOE)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a11      	ldr	r2, [pc, #68]	@ (8000420 <vDoGpioPeriClockControl+0x138>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <vDoGpioPeriClockControl+0x104>
			GPIOE_PCKL_DI();
 80003de:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 80003e4:	f023 0310 	bic.w	r3, r3, #16
 80003e8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ea:	e009      	b.n	8000400 <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOH)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a0d      	ldr	r2, [pc, #52]	@ (8000424 <vDoGpioPeriClockControl+0x13c>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d105      	bne.n	8000400 <vDoGpioPeriClockControl+0x118>
			GPIOH_PCKL_DI();
 80003f4:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f8:	4a05      	ldr	r2, [pc, #20]	@ (8000410 <vDoGpioPeriClockControl+0x128>)
 80003fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80003fe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	40020000 	.word	0x40020000
 8000410:	40023800 	.word	0x40023800
 8000414:	40020400 	.word	0x40020400
 8000418:	40020800 	.word	0x40020800
 800041c:	40020c00 	.word	0x40020c00
 8000420:	40021000 	.word	0x40021000
 8000424:	40021c00 	.word	0x40021c00

08000428 <vDoGpioIni>:
 * 					TS_GPIO_HANDLE *psGpioHandle - GPIO Handle structure
 * Return       : void
 * ===========================================================================
 */
void vDoGpioIni(TS_GPIO_HANDLE *psGpioHandle)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	uint8_t u8GpioPin = (psGpioHandle->sGpioPinConfig->u8GpioPinNum & 0x0F);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	f003 030f 	and.w	r3, r3, #15
 800043a:	73fb      	strb	r3, [r7, #15]
	uint8_t u8GpioPinMode = (psGpioHandle->sGpioPinConfig->u8GpioPinMode & 0x07);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	785b      	ldrb	r3, [r3, #1]
 8000442:	f003 0307 	and.w	r3, r3, #7
 8000446:	73bb      	strb	r3, [r7, #14]

	/* Initialize GPIO Pin Mode */
	switch (u8GpioPinMode) {
 8000448:	7bbb      	ldrb	r3, [r7, #14]
 800044a:	2b06      	cmp	r3, #6
 800044c:	d876      	bhi.n	800053c <vDoGpioIni+0x114>
 800044e:	a201      	add	r2, pc, #4	@ (adr r2, 8000454 <vDoGpioIni+0x2c>)
 8000450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000454:	08000471 	.word	0x08000471
 8000458:	08000471 	.word	0x08000471
 800045c:	08000471 	.word	0x08000471
 8000460:	08000471 	.word	0x08000471
 8000464:	080004a9 	.word	0x080004a9
 8000468:	080004db 	.word	0x080004db
 800046c:	0800050d 	.word	0x0800050d
		case GPIO_MODE_IN:
		case GPIO_MODE_OUT:
		case GPIO_MODE_ALT_FUNC:
		case GPIO_MODE_ANALOG:
			psGpioHandle->psGpioBaseAddr->MODER &= ~( 0x03 << (u8GpioPin * 2U));
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	005b      	lsls	r3, r3, #1
 800047a:	2103      	movs	r1, #3
 800047c:	fa01 f303 	lsl.w	r3, r1, r3
 8000480:	43db      	mvns	r3, r3
 8000482:	4619      	mov	r1, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	400a      	ands	r2, r1
 800048a:	601a      	str	r2, [r3, #0]
			psGpioHandle->psGpioBaseAddr->MODER |= (u8GpioPinMode << (u8GpioPin * 2U));
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	7bb9      	ldrb	r1, [r7, #14]
 8000494:	7bfb      	ldrb	r3, [r7, #15]
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	fa01 f303 	lsl.w	r3, r1, r3
 800049c:	4619      	mov	r1, r3
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	430a      	orrs	r2, r1
 80004a4:	601a      	str	r2, [r3, #0]
			break;
 80004a6:	e04a      	b.n	800053e <vDoGpioIni+0x116>

		case GPIO_MODE_IT_RE:
			EXTI->RTSR |= (1 << u8GpioPin);
 80004a8:	4b72      	ldr	r3, [pc, #456]	@ (8000674 <vDoGpioIni+0x24c>)
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	7bfa      	ldrb	r2, [r7, #15]
 80004ae:	2101      	movs	r1, #1
 80004b0:	fa01 f202 	lsl.w	r2, r1, r2
 80004b4:	4611      	mov	r1, r2
 80004b6:	4a6f      	ldr	r2, [pc, #444]	@ (8000674 <vDoGpioIni+0x24c>)
 80004b8:	430b      	orrs	r3, r1
 80004ba:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << u8GpioPin);
 80004bc:	4b6d      	ldr	r3, [pc, #436]	@ (8000674 <vDoGpioIni+0x24c>)
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	7bfa      	ldrb	r2, [r7, #15]
 80004c2:	2101      	movs	r1, #1
 80004c4:	fa01 f202 	lsl.w	r2, r1, r2
 80004c8:	43d2      	mvns	r2, r2
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a69      	ldr	r2, [pc, #420]	@ (8000674 <vDoGpioIni+0x24c>)
 80004ce:	400b      	ands	r3, r1
 80004d0:	60d3      	str	r3, [r2, #12]

			vDoGpioIrqIni(psGpioHandle);
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f7ff fec8 	bl	8000268 <vDoGpioIrqIni>
			break;
 80004d8:	e031      	b.n	800053e <vDoGpioIni+0x116>

		case GPIO_MODE_IT_FE:
			EXTI->FTSR |= (1 << u8GpioPin);
 80004da:	4b66      	ldr	r3, [pc, #408]	@ (8000674 <vDoGpioIni+0x24c>)
 80004dc:	68db      	ldr	r3, [r3, #12]
 80004de:	7bfa      	ldrb	r2, [r7, #15]
 80004e0:	2101      	movs	r1, #1
 80004e2:	fa01 f202 	lsl.w	r2, r1, r2
 80004e6:	4611      	mov	r1, r2
 80004e8:	4a62      	ldr	r2, [pc, #392]	@ (8000674 <vDoGpioIni+0x24c>)
 80004ea:	430b      	orrs	r3, r1
 80004ec:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << u8GpioPin);
 80004ee:	4b61      	ldr	r3, [pc, #388]	@ (8000674 <vDoGpioIni+0x24c>)
 80004f0:	689b      	ldr	r3, [r3, #8]
 80004f2:	7bfa      	ldrb	r2, [r7, #15]
 80004f4:	2101      	movs	r1, #1
 80004f6:	fa01 f202 	lsl.w	r2, r1, r2
 80004fa:	43d2      	mvns	r2, r2
 80004fc:	4611      	mov	r1, r2
 80004fe:	4a5d      	ldr	r2, [pc, #372]	@ (8000674 <vDoGpioIni+0x24c>)
 8000500:	400b      	ands	r3, r1
 8000502:	6093      	str	r3, [r2, #8]

			vDoGpioIrqIni(psGpioHandle);
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f7ff feaf 	bl	8000268 <vDoGpioIrqIni>
			break;
 800050a:	e018      	b.n	800053e <vDoGpioIni+0x116>

		case GPIO_MODE_IT_RFE:
			EXTI->RTSR |= (1 << u8GpioPin);
 800050c:	4b59      	ldr	r3, [pc, #356]	@ (8000674 <vDoGpioIni+0x24c>)
 800050e:	689b      	ldr	r3, [r3, #8]
 8000510:	7bfa      	ldrb	r2, [r7, #15]
 8000512:	2101      	movs	r1, #1
 8000514:	fa01 f202 	lsl.w	r2, r1, r2
 8000518:	4611      	mov	r1, r2
 800051a:	4a56      	ldr	r2, [pc, #344]	@ (8000674 <vDoGpioIni+0x24c>)
 800051c:	430b      	orrs	r3, r1
 800051e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << u8GpioPin);
 8000520:	4b54      	ldr	r3, [pc, #336]	@ (8000674 <vDoGpioIni+0x24c>)
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	7bfa      	ldrb	r2, [r7, #15]
 8000526:	2101      	movs	r1, #1
 8000528:	fa01 f202 	lsl.w	r2, r1, r2
 800052c:	4611      	mov	r1, r2
 800052e:	4a51      	ldr	r2, [pc, #324]	@ (8000674 <vDoGpioIni+0x24c>)
 8000530:	430b      	orrs	r3, r1
 8000532:	60d3      	str	r3, [r2, #12]

			vDoGpioIrqIni(psGpioHandle);
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f7ff fe97 	bl	8000268 <vDoGpioIrqIni>
			break;
 800053a:	e000      	b.n	800053e <vDoGpioIni+0x116>

		default:
			break;
 800053c:	bf00      	nop
	}

	/* Initialize GPIO Pin Speed */
	psGpioHandle->psGpioBaseAddr->OSPEEDR &= ~( 0x03 << (u8GpioPin * 2U));
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	689a      	ldr	r2, [r3, #8]
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	2103      	movs	r1, #3
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	43db      	mvns	r3, r3
 8000550:	4619      	mov	r1, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	400a      	ands	r2, r1
 8000558:	609a      	str	r2, [r3, #8]
	psGpioHandle->psGpioBaseAddr->OSPEEDR |= ((psGpioHandle->sGpioPinConfig->u8GpioPinSpeed & 0x03) << (u8GpioPin * 2U));
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	689a      	ldr	r2, [r3, #8]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	789b      	ldrb	r3, [r3, #2]
 8000566:	f003 0103 	and.w	r1, r3, #3
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	fa01 f303 	lsl.w	r3, r1, r3
 8000572:	4619      	mov	r1, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	430a      	orrs	r2, r1
 800057a:	609a      	str	r2, [r3, #8]

	/* Initialize GPIO Pin Pull-Up/Pull-Down mode */
	psGpioHandle->psGpioBaseAddr->PUPDR &= ~( 0x03 << (u8GpioPin * 2U));
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	68da      	ldr	r2, [r3, #12]
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	2103      	movs	r1, #3
 8000588:	fa01 f303 	lsl.w	r3, r1, r3
 800058c:	43db      	mvns	r3, r3
 800058e:	4619      	mov	r1, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	400a      	ands	r2, r1
 8000596:	60da      	str	r2, [r3, #12]
	psGpioHandle->psGpioBaseAddr->PUPDR |= ((psGpioHandle->sGpioPinConfig->u8GpioPinPuPdControl & 0x03) << (u8GpioPin * 2U));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	68da      	ldr	r2, [r3, #12]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	78db      	ldrb	r3, [r3, #3]
 80005a4:	f003 0103 	and.w	r1, r3, #3
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	fa01 f303 	lsl.w	r3, r1, r3
 80005b0:	4619      	mov	r1, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	430a      	orrs	r2, r1
 80005b8:	60da      	str	r2, [r3, #12]

	/* Initialize GPIO Pin Output type */
	psGpioHandle->psGpioBaseAddr->OTYPER &= ~( 0x01 << (u8GpioPin * 2U));
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	2101      	movs	r1, #1
 80005c6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ca:	43db      	mvns	r3, r3
 80005cc:	4619      	mov	r1, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	400a      	ands	r2, r1
 80005d4:	605a      	str	r2, [r3, #4]
	psGpioHandle->psGpioBaseAddr->OTYPER |= ((psGpioHandle->sGpioPinConfig->u8GpioPinOPType & 0x01) << u8GpioPin);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	685a      	ldr	r2, [r3, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	791b      	ldrb	r3, [r3, #4]
 80005e2:	f003 0101 	and.w	r1, r3, #1
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	fa01 f303 	lsl.w	r3, r1, r3
 80005ec:	4619      	mov	r1, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	430a      	orrs	r2, r1
 80005f4:	605a      	str	r2, [r3, #4]

	/* Initialize GPIO Pin Alternate functions mode */
	if(psGpioHandle->sGpioPinConfig->u8GpioPinMode == (uint8_t)GPIO_MODE_ALT_FUNC)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d134      	bne.n	800066a <vDoGpioIni+0x242>
	{
		psGpioHandle->psGpioBaseAddr->AFR[(u8GpioPin / 8U)] &= ~(( 0x0F << (u8GpioPin * 4U) % 32U));
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	7bfa      	ldrb	r2, [r7, #15]
 8000606:	08d2      	lsrs	r2, r2, #3
 8000608:	b2d0      	uxtb	r0, r2
 800060a:	4602      	mov	r2, r0
 800060c:	3208      	adds	r2, #8
 800060e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	f003 031c 	and.w	r3, r3, #28
 800061a:	210f      	movs	r1, #15
 800061c:	fa01 f303 	lsl.w	r3, r1, r3
 8000620:	43db      	mvns	r3, r3
 8000622:	4619      	mov	r1, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4011      	ands	r1, r2
 800062a:	f100 0208 	add.w	r2, r0, #8
 800062e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		psGpioHandle->psGpioBaseAddr->AFR[(u8GpioPin / 8U)] |= ((psGpioHandle->sGpioPinConfig->u8GpioPinAltFunMode & 0x0F) << ((u8GpioPin * 4U) % 32U));
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	7bfa      	ldrb	r2, [r7, #15]
 8000638:	08d2      	lsrs	r2, r2, #3
 800063a:	b2d0      	uxtb	r0, r2
 800063c:	4602      	mov	r2, r0
 800063e:	3208      	adds	r2, #8
 8000640:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	795b      	ldrb	r3, [r3, #5]
 800064a:	f003 010f 	and.w	r1, r3, #15
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	f003 031c 	and.w	r3, r3, #28
 8000656:	fa01 f303 	lsl.w	r3, r1, r3
 800065a:	4619      	mov	r1, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4311      	orrs	r1, r2
 8000662:	f100 0208 	add.w	r2, r0, #8
 8000666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40013c00 	.word	0x40013c00

08000678 <vDoSpiTxeHandle>:
 * Return       : void
 * ===========================================================================
 */

static inline void vDoSpiTxeHandle(TS_SPI_HANDLE *psSpiHandle)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	if((psSpiHandle->psSpiBaseAddr->CR1 & (0x01 << 11U)) != 0x00)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800068a:	2b00      	cmp	r3, #0
 800068c:	d015      	beq.n	80006ba <vDoSpiTxeHandle+0x42>
	{
		/* Load 16 bits into SPI_DR register */
		psSpiHandle->psSpiBaseAddr->DR = *((uint16_t*)psSpiHandle->pu8SpiTxBuff);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	689b      	ldr	r3, [r3, #8]
 8000692:	881a      	ldrh	r2, [r3, #0]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	60da      	str	r2, [r3, #12]
		--psSpiHandle->u32SpiTxBuffLen;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	691b      	ldr	r3, [r3, #16]
 800069e:	1e5a      	subs	r2, r3, #1
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	611a      	str	r2, [r3, #16]
		--psSpiHandle->u32SpiTxBuffLen;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	1e5a      	subs	r2, r3, #1
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	611a      	str	r2, [r3, #16]
		(uint16_t*)psSpiHandle->pu8SpiTxBuff++;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	1c5a      	adds	r2, r3, #1
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	e00f      	b.n	80006da <vDoSpiTxeHandle+0x62>
	}
	else
	{
		/* Load 8 bits into SPI_DR register */
		psSpiHandle->psSpiBaseAddr->DR = *psSpiHandle->pu8SpiTxBuff;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	781a      	ldrb	r2, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	60da      	str	r2, [r3, #12]
		--psSpiHandle->u32SpiTxBuffLen;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	691b      	ldr	r3, [r3, #16]
 80006ca:	1e5a      	subs	r2, r3, #1
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	611a      	str	r2, [r3, #16]
		psSpiHandle->pu8SpiTxBuff++;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	609a      	str	r2, [r3, #8]
	}

	if(0U == psSpiHandle->u32SpiTxBuffLen)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	691b      	ldr	r3, [r3, #16]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d106      	bne.n	80006f0 <vDoSpiTxeHandle+0x78>
	{
		vDoSpiCloseTransmission(psSpiHandle);
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f000 fa89 	bl	8000bfa <vDoSpiCloseTransmission>
		vDoSpiEventCallback(psSpiHandle, eStatusEventSpiTxDone);
 80006e8:	2100      	movs	r1, #0
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f000 fb9c 	bl	8000e28 <vDoSpiEventCallback>
	}
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <vDoSpiRxneHandle>:
 * Return       : void
 * ===========================================================================
 */

static inline void vDoSpiRxneHandle(TS_SPI_HANDLE *psSpiHandle)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	if((psSpiHandle->psSpiBaseAddr->CR1 & (0x01 << 11U)) != 0x00)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800070a:	2b00      	cmp	r3, #0
 800070c:	d016      	beq.n	800073c <vDoSpiRxneHandle+0x44>
	{
		/* Read 16 bits from SPI_DR register */
		*((uint16_t*)psSpiHandle->pu8SpiRxBuff) = psSpiHandle->psSpiBaseAddr->DR;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	68da      	ldr	r2, [r3, #12]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	b292      	uxth	r2, r2
 800071a:	801a      	strh	r2, [r3, #0]
		--psSpiHandle->u32SpiRxBuffLen;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	695b      	ldr	r3, [r3, #20]
 8000720:	1e5a      	subs	r2, r3, #1
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	615a      	str	r2, [r3, #20]
		--psSpiHandle->u32SpiRxBuffLen;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	1e5a      	subs	r2, r3, #1
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	615a      	str	r2, [r3, #20]
		(uint16_t*)psSpiHandle->pu8SpiRxBuff++;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	1c5a      	adds	r2, r3, #1
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	e010      	b.n	800075e <vDoSpiRxneHandle+0x66>
	}
	else
	{
		/* Read 8 bits from SPI_DR register */
		*psSpiHandle->pu8SpiRxBuff = psSpiHandle->psSpiBaseAddr->DR;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	68da      	ldr	r2, [r3, #12]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	68db      	ldr	r3, [r3, #12]
 8000746:	b2d2      	uxtb	r2, r2
 8000748:	701a      	strb	r2, [r3, #0]
		--psSpiHandle->u32SpiRxBuffLen;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	1e5a      	subs	r2, r3, #1
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	615a      	str	r2, [r3, #20]
		psSpiHandle->pu8SpiRxBuff++;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	1c5a      	adds	r2, r3, #1
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	60da      	str	r2, [r3, #12]
	}

	if(0U == psSpiHandle->u32SpiRxBuffLen)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d106      	bne.n	8000774 <vDoSpiRxneHandle+0x7c>
	{
		vDoSpiCloseReception(psSpiHandle);
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f000 fa61 	bl	8000c2e <vDoSpiCloseReception>
		vDoSpiEventCallback(psSpiHandle, eStatusEventSpiRxDone);
 800076c:	2101      	movs	r1, #1
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f000 fb5a 	bl	8000e28 <vDoSpiEventCallback>
	}
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <vDoSpiOvrHandle>:
 * Return       : void
 * ===========================================================================
 */

static inline void vDoSpiOvrHandle(TS_SPI_HANDLE *psSpiHandle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	if(eStateSpiBusBusyTx != psSpiHandle->eStateSpiBus)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7e1b      	ldrb	r3, [r3, #24]
 8000788:	2b02      	cmp	r3, #2
 800078a:	d004      	beq.n	8000796 <vDoSpiOvrHandle+0x1a>
	{
		vDoSpiClearOvrFlag(psSpiHandle->psSpiBaseAddr);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4618      	mov	r0, r3
 8000792:	f000 fa21 	bl	8000bd8 <vDoSpiClearOvrFlag>
	}

	/* Inform the application */
	vDoSpiEventCallback(psSpiHandle, eStatusEventSpiOvrErr);
 8000796:	2102      	movs	r1, #2
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f000 fb45 	bl	8000e28 <vDoSpiEventCallback>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <vDoSpiPeriClockControl>:
 * Return       : void
 * ===========================================================================
 */

void vDoSpiPeriClockControl(TS_SPI_REG_DEF *psSpi, bool bState)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	70fb      	strb	r3, [r7, #3]
	if(bState)
 80007b4:	78fb      	ldrb	r3, [r7, #3]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d02b      	beq.n	8000812 <vDoSpiPeriClockControl+0x6a>
	{
		if(psSpi == SPI1)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a2d      	ldr	r2, [pc, #180]	@ (8000874 <vDoSpiPeriClockControl+0xcc>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d106      	bne.n	80007d0 <vDoSpiPeriClockControl+0x28>
		{
			SPI1_PCKL_EN();
 80007c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000878 <vDoSpiPeriClockControl+0xd0>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c6:	4a2c      	ldr	r2, [pc, #176]	@ (8000878 <vDoSpiPeriClockControl+0xd0>)
 80007c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007cc:	6453      	str	r3, [r2, #68]	@ 0x44
		else if (psSpi == SPI4)
		{
			SPI4_PCKL_DI();
		}
	}
}
 80007ce:	e04b      	b.n	8000868 <vDoSpiPeriClockControl+0xc0>
		else if (psSpi == SPI2)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a2a      	ldr	r2, [pc, #168]	@ (800087c <vDoSpiPeriClockControl+0xd4>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d106      	bne.n	80007e6 <vDoSpiPeriClockControl+0x3e>
			SPI2_PCKL_EN();
 80007d8:	4b27      	ldr	r3, [pc, #156]	@ (8000878 <vDoSpiPeriClockControl+0xd0>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007dc:	4a26      	ldr	r2, [pc, #152]	@ (8000878 <vDoSpiPeriClockControl+0xd0>)
 80007de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007e4:	e040      	b.n	8000868 <vDoSpiPeriClockControl+0xc0>
		else if (psSpi == SPI3)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a25      	ldr	r2, [pc, #148]	@ (8000880 <vDoSpiPeriClockControl+0xd8>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d106      	bne.n	80007fc <vDoSpiPeriClockControl+0x54>
			SPI3_PCKL_EN();
 80007ee:	4b22      	ldr	r3, [pc, #136]	@ (8000878 <vDoSpiPeriClockControl+0xd0>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f2:	4a21      	ldr	r2, [pc, #132]	@ (8000878 <vDoSpiPeriClockControl+0xd0>)
 80007f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007f8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007fa:	e035      	b.n	8000868 <vDoSpiPeriClockControl+0xc0>
		else if (psSpi == SPI4)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a21      	ldr	r2, [pc, #132]	@ (8000884 <vDoSpiPeriClockControl+0xdc>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d131      	bne.n	8000868 <vDoSpiPeriClockControl+0xc0>
			SPI4_PCKL_EN();
 8000804:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <vDoSpiPeriClockControl+0xd0>)
 8000806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000808:	4a1b      	ldr	r2, [pc, #108]	@ (8000878 <vDoSpiPeriClockControl+0xd0>)
 800080a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800080e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000810:	e02a      	b.n	8000868 <vDoSpiPeriClockControl+0xc0>
		if(psSpi == SPI1)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a17      	ldr	r2, [pc, #92]	@ (8000874 <vDoSpiPeriClockControl+0xcc>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d106      	bne.n	8000828 <vDoSpiPeriClockControl+0x80>
			SPI1_PCKL_DI();
 800081a:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <vDoSpiPeriClockControl+0xd0>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081e:	4a16      	ldr	r2, [pc, #88]	@ (8000878 <vDoSpiPeriClockControl+0xd0>)
 8000820:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000824:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000826:	e01f      	b.n	8000868 <vDoSpiPeriClockControl+0xc0>
		else if (psSpi == SPI2)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a14      	ldr	r2, [pc, #80]	@ (800087c <vDoSpiPeriClockControl+0xd4>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d106      	bne.n	800083e <vDoSpiPeriClockControl+0x96>
			SPI2_PCKL_DI();
 8000830:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <vDoSpiPeriClockControl+0xd0>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000834:	4a10      	ldr	r2, [pc, #64]	@ (8000878 <vDoSpiPeriClockControl+0xd0>)
 8000836:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800083a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800083c:	e014      	b.n	8000868 <vDoSpiPeriClockControl+0xc0>
		else if (psSpi == SPI3)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a0f      	ldr	r2, [pc, #60]	@ (8000880 <vDoSpiPeriClockControl+0xd8>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d106      	bne.n	8000854 <vDoSpiPeriClockControl+0xac>
			SPI3_PCKL_DI();
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <vDoSpiPeriClockControl+0xd0>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084a:	4a0b      	ldr	r2, [pc, #44]	@ (8000878 <vDoSpiPeriClockControl+0xd0>)
 800084c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000850:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000852:	e009      	b.n	8000868 <vDoSpiPeriClockControl+0xc0>
		else if (psSpi == SPI4)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a0b      	ldr	r2, [pc, #44]	@ (8000884 <vDoSpiPeriClockControl+0xdc>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d105      	bne.n	8000868 <vDoSpiPeriClockControl+0xc0>
			SPI4_PCKL_DI();
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <vDoSpiPeriClockControl+0xd0>)
 800085e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000860:	4a05      	ldr	r2, [pc, #20]	@ (8000878 <vDoSpiPeriClockControl+0xd0>)
 8000862:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000866:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40013000 	.word	0x40013000
 8000878:	40023800 	.word	0x40023800
 800087c:	40003800 	.word	0x40003800
 8000880:	40003c00 	.word	0x40003c00
 8000884:	40013400 	.word	0x40013400

08000888 <vDoSpiIni>:
 * 					TS_SPI_HANDLE *psSpiHandle - SPI Handle structure
 * Return       : void
 * ===========================================================================
 */
void vDoSpiIni(TS_SPI_HANDLE *psSpiHandle)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	uint8_t u8SpiBusMode = (psSpiHandle->psSpiConfig->u8SpiBusConfig & 0x03);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	785b      	ldrb	r3, [r3, #1]
 8000896:	f003 0303 	and.w	r3, r3, #3
 800089a:	73fb      	strb	r3, [r7, #15]

	/* Initialize SPI Device Mode */
	psSpiHandle->psSpiBaseAddr->CR1 &= ~(0x01 << 2U);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f022 0204 	bic.w	r2, r2, #4
 80008aa:	601a      	str	r2, [r3, #0]
	psSpiHandle->psSpiBaseAddr->CR1 |= ((psSpiHandle->psSpiConfig->u8SpiDeviceMode & 0x01) << 2U);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	6819      	ldr	r1, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	f003 0204 	and.w	r2, r3, #4
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	430a      	orrs	r2, r1
 80008c4:	601a      	str	r2, [r3, #0]

	/* Initialize SPI Bus Mode */
		switch (u8SpiBusMode) {
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	2b02      	cmp	r3, #2
 80008ca:	d020      	beq.n	800090e <vDoSpiIni+0x86>
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	dc2f      	bgt.n	8000930 <vDoSpiIni+0xa8>
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d002      	beq.n	80008da <vDoSpiIni+0x52>
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d009      	beq.n	80008ec <vDoSpiIni+0x64>
				psSpiHandle->psSpiBaseAddr->CR1 |= (0x01 << 10U);
				psSpiHandle->psSpiBaseAddr->CR1 &= ~(0x01 << 15U);
				break;

			default:
				break;
 80008d8:	e02a      	b.n	8000930 <vDoSpiIni+0xa8>
				psSpiHandle->psSpiBaseAddr->CR1 &= ~((0x01 << 15U) | (0x01 << 10U));
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f422 4204 	bic.w	r2, r2, #33792	@ 0x8400
 80008e8:	601a      	str	r2, [r3, #0]
				break;
 80008ea:	e022      	b.n	8000932 <vDoSpiIni+0xaa>
				psSpiHandle->psSpiBaseAddr->CR1 |= (0x01 << 15U);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80008fa:	601a      	str	r2, [r3, #0]
				psSpiHandle->psSpiBaseAddr->CR1 &= ~(0x01 << 10U);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800090a:	601a      	str	r2, [r3, #0]
				break;
 800090c:	e011      	b.n	8000932 <vDoSpiIni+0xaa>
				psSpiHandle->psSpiBaseAddr->CR1 |= (0x01 << 10U);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800091c:	601a      	str	r2, [r3, #0]
				psSpiHandle->psSpiBaseAddr->CR1 &= ~(0x01 << 15U);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800092c:	601a      	str	r2, [r3, #0]
				break;
 800092e:	e000      	b.n	8000932 <vDoSpiIni+0xaa>
				break;
 8000930:	bf00      	nop
		}

	/* Initialize SPI Baud Rate */
	psSpiHandle->psSpiBaseAddr->CR1 &= ~(0x07 << 3U);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8000940:	601a      	str	r2, [r3, #0]
	psSpiHandle->psSpiBaseAddr->CR1 |= ((psSpiHandle->psSpiConfig->u8SpiSclkSpeed & 0x07) << 3U);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	6819      	ldr	r1, [r3, #0]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	789b      	ldrb	r3, [r3, #2]
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	430a      	orrs	r2, r1
 800095a:	601a      	str	r2, [r3, #0]

	/* Initialize SPI Data Frame Format */
	psSpiHandle->psSpiBaseAddr->CR1 &= ~(0x01 << 11U);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800096a:	601a      	str	r2, [r3, #0]
	psSpiHandle->psSpiBaseAddr->CR1 |= ((psSpiHandle->psSpiConfig->u8SpiDff & 0x01) << 11U);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	6819      	ldr	r1, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	78db      	ldrb	r3, [r3, #3]
 8000978:	02db      	lsls	r3, r3, #11
 800097a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	430a      	orrs	r2, r1
 8000984:	601a      	str	r2, [r3, #0]

	/* Initialize SPI Clock Polarity */
	psSpiHandle->psSpiBaseAddr->CR1 &= ~(0x01 << 1U);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f022 0202 	bic.w	r2, r2, #2
 8000994:	601a      	str	r2, [r3, #0]
	psSpiHandle->psSpiBaseAddr->CR1 |= ((psSpiHandle->psSpiConfig->u8SpiCpol & 0x01) << 1U);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	6819      	ldr	r1, [r3, #0]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	791b      	ldrb	r3, [r3, #4]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	f003 0202 	and.w	r2, r3, #2
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	430a      	orrs	r2, r1
 80009ae:	601a      	str	r2, [r3, #0]

	/* Initialize SPI Clock Phase */
	psSpiHandle->psSpiBaseAddr->CR1 &= ~(0x01 << 0U);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f022 0201 	bic.w	r2, r2, #1
 80009be:	601a      	str	r2, [r3, #0]
	psSpiHandle->psSpiBaseAddr->CR1 |= ((psSpiHandle->psSpiConfig->u8SpiCpha & 0x01) << 0U);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	6819      	ldr	r1, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	795b      	ldrb	r3, [r3, #5]
 80009cc:	f003 0201 	and.w	r2, r3, #1
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	430a      	orrs	r2, r1
 80009d6:	601a      	str	r2, [r3, #0]

	/* Initialize SPI Slave Management */
	psSpiHandle->psSpiBaseAddr->CR1 &= ~(0x01 << 9U);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80009e6:	601a      	str	r2, [r3, #0]
	psSpiHandle->psSpiBaseAddr->CR1 |= ((psSpiHandle->psSpiConfig->u8SpiSsm & 0x01) << 9U);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	6819      	ldr	r1, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	799b      	ldrb	r3, [r3, #6]
 80009f4:	025b      	lsls	r3, r3, #9
 80009f6:	f403 7200 	and.w	r2, r3, #512	@ 0x200
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	430a      	orrs	r2, r1
 8000a00:	601a      	str	r2, [r3, #0]
}
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <vDoSpiSendDataIt>:
 * Return       : TE_SPI_BUS_STATE - State of SPI Bus
 * ===========================================================================
 */

TE_SPI_BUS_STATE vDoSpiSendDataIt(TS_SPI_HANDLE *psSpiHandle, uint8_t *pu8SpiTxBuff, uint32_t u32SpiDataLen)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b087      	sub	sp, #28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
	TE_SPI_BUS_STATE eStateSpiBus = psSpiHandle->eStateSpiBus;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	7e1b      	ldrb	r3, [r3, #24]
 8000a1c:	75fb      	strb	r3, [r7, #23]

	if(eStateSpiBus != eStateSpiBusBusyTx)
 8000a1e:	7dfb      	ldrb	r3, [r7, #23]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d010      	beq.n	8000a46 <vDoSpiSendDataIt+0x3a>
	{
		/* Store TX Buffer address and TX Buffer length in handle structure */
		psSpiHandle->pu8SpiTxBuff = pu8SpiTxBuff;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	609a      	str	r2, [r3, #8]
		psSpiHandle->u32SpiTxBuffLen = u32SpiDataLen;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	611a      	str	r2, [r3, #16]

		/* Set SPI Bus in TX busy mode */
		psSpiHandle->eStateSpiBus = eStateSpiBusBusyTx;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2202      	movs	r2, #2
 8000a34:	761a      	strb	r2, [r3, #24]

		/* Enable interrupt on TXE Flag in SPI_SR register */
		psSpiHandle->psSpiBaseAddr->CR2 |= (0x01 << 7U);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	685a      	ldr	r2, [r3, #4]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000a44:	605a      	str	r2, [r3, #4]
	}

	return eStateSpiBus;
 8000a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	371c      	adds	r7, #28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr

08000a52 <vDoSpiIrqConfig>:
 * 					boolean bIqrState - State of IQR
 * Return       : void
 * ===========================================================================
 */
void vDoSpiIrqConfig(TS_NVIC_REG_DEF *psNvic, uint8_t u8IrqNumber, uint8_t u8IrqPriority, bool bIqrState)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4603      	mov	r3, r0
 8000a62:	70fb      	strb	r3, [r7, #3]
 8000a64:	460b      	mov	r3, r1
 8000a66:	70bb      	strb	r3, [r7, #2]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	707b      	strb	r3, [r7, #1]
	if(bIqrState)
 8000a6c:	787b      	ldrb	r3, [r7, #1]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d012      	beq.n	8000a98 <vDoSpiIrqConfig+0x46>
	{
		psNvic->ISER[(u8IrqNumber / 32U)] |= (1 << u8IrqNumber % 32U);
 8000a72:	78fb      	ldrb	r3, [r7, #3]
 8000a74:	095b      	lsrs	r3, r3, #5
 8000a76:	b2d8      	uxtb	r0, r3
 8000a78:	4602      	mov	r2, r0
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a80:	78fa      	ldrb	r2, [r7, #3]
 8000a82:	f002 021f 	and.w	r2, r2, #31
 8000a86:	2101      	movs	r1, #1
 8000a88:	fa01 f202 	lsl.w	r2, r1, r2
 8000a8c:	4601      	mov	r1, r0
 8000a8e:	431a      	orrs	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8000a96:	e012      	b.n	8000abe <vDoSpiIrqConfig+0x6c>
	}
	else
	{
		psNvic->ISER[(u8IrqNumber / 32U)] &= ~(1 << u8IrqNumber % 32U);
 8000a98:	78fb      	ldrb	r3, [r7, #3]
 8000a9a:	095b      	lsrs	r3, r3, #5
 8000a9c:	b2d8      	uxtb	r0, r3
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aa6:	78fa      	ldrb	r2, [r7, #3]
 8000aa8:	f002 021f 	and.w	r2, r2, #31
 8000aac:	2101      	movs	r1, #1
 8000aae:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab2:	43d2      	mvns	r2, r2
 8000ab4:	4601      	mov	r1, r0
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	}

	psNvic->IPR[u8IrqNumber / 4U] |= (u8IrqPriority << ((u8IrqNumber % 4U) * 4)) ;
 8000abe:	78fb      	ldrb	r3, [r7, #3]
 8000ac0:	089b      	lsrs	r3, r3, #2
 8000ac2:	b2d8      	uxtb	r0, r3
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	32c0      	adds	r2, #192	@ 0xc0
 8000aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ace:	78b9      	ldrb	r1, [r7, #2]
 8000ad0:	78fa      	ldrb	r2, [r7, #3]
 8000ad2:	f002 0203 	and.w	r2, r2, #3
 8000ad6:	0092      	lsls	r2, r2, #2
 8000ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8000adc:	4611      	mov	r1, r2
 8000ade:	4602      	mov	r2, r0
 8000ae0:	4319      	orrs	r1, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	32c0      	adds	r2, #192	@ 0xc0
 8000ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr

08000af4 <vDoSpiIrqHandling>:
 * Return       : void
 * ===========================================================================
 */

void vDoSpiIrqHandling(TS_EXTI_REG_DEF *psExti, TS_SPI_HANDLE *psSpiHandle)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
	if(psSpiHandle->psSpiBaseAddr->CR2 & (0x01 << 7U) &&
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d009      	beq.n	8000b20 <vDoSpiIrqHandling+0x2c>
	   psSpiHandle->psSpiBaseAddr->SR  & (0x01 << 1U))
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	f003 0302 	and.w	r3, r3, #2
	if(psSpiHandle->psSpiBaseAddr->CR2 & (0x01 << 7U) &&
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <vDoSpiIrqHandling+0x2c>
	{
		vDoSpiTxeHandle(psSpiHandle);
 8000b1a:	6838      	ldr	r0, [r7, #0]
 8000b1c:	f7ff fdac 	bl	8000678 <vDoSpiTxeHandle>
	}

	if(psSpiHandle->psSpiBaseAddr->CR2 & (0x01 << 6U) &&
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d009      	beq.n	8000b42 <vDoSpiIrqHandling+0x4e>
	   psSpiHandle->psSpiBaseAddr->SR  & (0x01 << 0U))
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	f003 0301 	and.w	r3, r3, #1
	if(psSpiHandle->psSpiBaseAddr->CR2 & (0x01 << 6U) &&
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d002      	beq.n	8000b42 <vDoSpiIrqHandling+0x4e>
	{
		vDoSpiRxneHandle(psSpiHandle);
 8000b3c:	6838      	ldr	r0, [r7, #0]
 8000b3e:	f7ff fddb 	bl	80006f8 <vDoSpiRxneHandle>
	}

	if(psSpiHandle->psSpiBaseAddr->CR2 & (0x01 << 5U) &&
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f003 0320 	and.w	r3, r3, #32
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d009      	beq.n	8000b64 <vDoSpiIrqHandling+0x70>
	   psSpiHandle->psSpiBaseAddr->SR  & (0x01 << 6U))
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
	if(psSpiHandle->psSpiBaseAddr->CR2 & (0x01 << 5U) &&
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d002      	beq.n	8000b64 <vDoSpiIrqHandling+0x70>
	{
		vDoSpiOvrHandle(psSpiHandle);
 8000b5e:	6838      	ldr	r0, [r7, #0]
 8000b60:	f7ff fe0c 	bl	800077c <vDoSpiOvrHandle>
	}

}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <vDoSpiPeriControl>:
 * Return       : void
 * ===========================================================================
 */

void vDoSpiPeriControl(TS_SPI_REG_DEF *psSpi, bool bState)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	70fb      	strb	r3, [r7, #3]
	if(bState)
 8000b78:	78fb      	ldrb	r3, [r7, #3]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d006      	beq.n	8000b8c <vDoSpiPeriControl+0x20>
	{
		psSpi->CR1 |= (0x01 << 6U);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		psSpi->CR1 &= ~(0x01 << 6U);
	}
}
 8000b8a:	e005      	b.n	8000b98 <vDoSpiPeriControl+0x2c>
		psSpi->CR1 &= ~(0x01 << 6U);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	601a      	str	r2, [r3, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr

08000ba2 <vDoSpiSsiControl>:
 * Return       : void
 * ===========================================================================
 */

void vDoSpiSsiControl(TS_SPI_REG_DEF *psSpi, bool bState)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	460b      	mov	r3, r1
 8000bac:	70fb      	strb	r3, [r7, #3]
	if(bState)
 8000bae:	78fb      	ldrb	r3, [r7, #3]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d006      	beq.n	8000bc2 <vDoSpiSsiControl+0x20>
	{
		psSpi->CR1 |= (0x01 << 8U);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		psSpi->CR1 &= ~(0x01 << 8U);
	}
}
 8000bc0:	e005      	b.n	8000bce <vDoSpiSsiControl+0x2c>
		psSpi->CR1 &= ~(0x01 << 8U);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	601a      	str	r2, [r3, #0]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <vDoSpiClearOvrFlag>:
 * Return       : void
 * ===========================================================================
 */

void vDoSpiClearOvrFlag(TS_SPI_REG_DEF *psSpi)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	uint32_t u32RegisterVal = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]

	/* Clear OVR flag */
	u32RegisterVal = psSpi->DR;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60fb      	str	r3, [r7, #12]
	u32RegisterVal = psSpi->SR;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	60fb      	str	r3, [r7, #12]

	/* Avoid unused variable warning */
	(void)u32RegisterVal;
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr

08000bfa <vDoSpiCloseTransmission>:
 * Return       : void
 * ===========================================================================
 */

void vDoSpiCloseTransmission(TS_SPI_HANDLE *psSpiHandle)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
	/* Disable TXE flag interrupts */
	psSpiHandle->psSpiBaseAddr->CR2 &= ~(1 << 7U);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000c10:	605a      	str	r2, [r3, #4]
	psSpiHandle->pu8SpiTxBuff = NULL;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
	psSpiHandle->u32SpiTxBuffLen = 0;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]

	/* Inform the application */
	psSpiHandle->eStateSpiBus = eStateSpiBusReady;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	761a      	strb	r2, [r3, #24]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr

08000c2e <vDoSpiCloseReception>:
 * Return       : void
 * ===========================================================================
 */

void vDoSpiCloseReception(TS_SPI_HANDLE *psSpiHandle)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
	/* Disable RXNE flag interrupts */
	psSpiHandle->psSpiBaseAddr->CR2 &= ~(1 << 6U);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000c44:	605a      	str	r2, [r3, #4]

	/* Inform the application */
	psSpiHandle->eStateSpiBus = eStateSpiBusReady;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
	...

08000c58 <delay>:

#include <string.h>
#include "stm32f401xx.h"

void delay(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1000000; ++i) {
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	e002      	b.n	8000c6a <delay+0x12>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3301      	adds	r3, #1
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a04      	ldr	r2, [pc, #16]	@ (8000c80 <delay+0x28>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	ddf8      	ble.n	8000c64 <delay+0xc>
		;
	}
}
 8000c72:	bf00      	nop
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	000f423f 	.word	0x000f423f

08000c84 <vDoSpiGpioConf>:

static inline void vDoSpiGpioConf(void);
static inline void vDoSpiHandleConf(void);

static inline void vDoSpiGpioConf(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b090      	sub	sp, #64	@ 0x40
 8000c88:	af00      	add	r7, sp, #0
	TS_GPIO_CONFIG sSpiNssConf;
	sSpiNssConf.u8GpioPinNum = 12U;
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	sSpiNssConf.u8GpioPinMode = GPIO_MODE_ALT_FUNC;
 8000c90:	2302      	movs	r3, #2
 8000c92:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	sSpiNssConf.u8GpioPinOPType = GPIO_OUT_MODE_PP;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	sSpiNssConf.u8GpioPinPuPdControl = GPIO_PUPD_NU_ND;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	sSpiNssConf.u8GpioPinSpeed = GPIO_OUT_SPEED_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	sSpiNssConf.u8GpioPinAltFunMode = 0x05;
 8000ca8:	2305      	movs	r3, #5
 8000caa:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	TS_GPIO_CONFIG sSpiSckConf;
	sSpiSckConf.u8GpioPinNum = 13U;
 8000cae:	230d      	movs	r3, #13
 8000cb0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	sSpiSckConf.u8GpioPinMode = GPIO_MODE_ALT_FUNC;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	sSpiSckConf.u8GpioPinOPType = GPIO_OUT_MODE_PP;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	sSpiSckConf.u8GpioPinPuPdControl = GPIO_PUPD_NU_ND;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	sSpiSckConf.u8GpioPinSpeed = GPIO_OUT_SPEED_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	sSpiSckConf.u8GpioPinAltFunMode = 0x05;
 8000ccc:	2305      	movs	r3, #5
 8000cce:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	TS_GPIO_CONFIG sSpiMisoConf;
	sSpiMisoConf.u8GpioPinNum = 14U;
 8000cd2:	230e      	movs	r3, #14
 8000cd4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	sSpiMisoConf.u8GpioPinMode = GPIO_MODE_ALT_FUNC;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	sSpiMisoConf.u8GpioPinOPType = GPIO_OUT_MODE_PP;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	sSpiMisoConf.u8GpioPinPuPdControl = GPIO_PUPD_NU_ND;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	sSpiMisoConf.u8GpioPinSpeed = GPIO_OUT_SPEED_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	sSpiMisoConf.u8GpioPinAltFunMode = 0x05;
 8000cf0:	2305      	movs	r3, #5
 8000cf2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

	TS_GPIO_CONFIG sSpiMosiConf;
	sSpiMosiConf.u8GpioPinNum = 15U;
 8000cf6:	230f      	movs	r3, #15
 8000cf8:	f887 3020 	strb.w	r3, [r7, #32]
	sSpiMosiConf.u8GpioPinMode = GPIO_MODE_ALT_FUNC;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	sSpiMosiConf.u8GpioPinOPType = GPIO_OUT_MODE_PP;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	sSpiMosiConf.u8GpioPinPuPdControl = GPIO_PUPD_NU_ND;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	sSpiMosiConf.u8GpioPinSpeed = GPIO_OUT_SPEED_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	sSpiMosiConf.u8GpioPinAltFunMode = 0x05;
 8000d14:	2305      	movs	r3, #5
 8000d16:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

	TS_GPIO_HANDLE sSpiNss;
	sSpiNss.psGpioBaseAddr = GPIOB;
 8000d1a:	4b17      	ldr	r3, [pc, #92]	@ (8000d78 <vDoSpiGpioConf+0xf4>)
 8000d1c:	61bb      	str	r3, [r7, #24]
	sSpiNss.sGpioPinConfig = &sSpiNssConf;
 8000d1e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d22:	61fb      	str	r3, [r7, #28]

	TS_GPIO_HANDLE sSpiSck;
	sSpiSck.psGpioBaseAddr = GPIOB;
 8000d24:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <vDoSpiGpioConf+0xf4>)
 8000d26:	613b      	str	r3, [r7, #16]
	sSpiSck.sGpioPinConfig = &sSpiSckConf;
 8000d28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d2c:	617b      	str	r3, [r7, #20]

	TS_GPIO_HANDLE sSpiMiso;
	sSpiMiso.psGpioBaseAddr = GPIOB;
 8000d2e:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <vDoSpiGpioConf+0xf4>)
 8000d30:	60bb      	str	r3, [r7, #8]
	sSpiMiso.sGpioPinConfig = &sSpiMisoConf;
 8000d32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d36:	60fb      	str	r3, [r7, #12]

	TS_GPIO_HANDLE sSpiMosi;
	sSpiMosi.psGpioBaseAddr = GPIOB;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	@ (8000d78 <vDoSpiGpioConf+0xf4>)
 8000d3a:	603b      	str	r3, [r7, #0]
	sSpiMosi.sGpioPinConfig = &sSpiMosiConf;
 8000d3c:	f107 0320 	add.w	r3, r7, #32
 8000d40:	607b      	str	r3, [r7, #4]


	vDoGpioPeriClockControl(GPIOB, true);
 8000d42:	2101      	movs	r1, #1
 8000d44:	480c      	ldr	r0, [pc, #48]	@ (8000d78 <vDoSpiGpioConf+0xf4>)
 8000d46:	f7ff facf 	bl	80002e8 <vDoGpioPeriClockControl>

	vDoGpioIni(&sSpiNss);
 8000d4a:	f107 0318 	add.w	r3, r7, #24
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fb6a 	bl	8000428 <vDoGpioIni>
	vDoGpioIni(&sSpiSck);
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fb65 	bl	8000428 <vDoGpioIni>
	vDoGpioIni(&sSpiMiso);
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fb60 	bl	8000428 <vDoGpioIni>
	vDoGpioIni(&sSpiMosi);
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fb5c 	bl	8000428 <vDoGpioIni>
}
 8000d70:	bf00      	nop
 8000d72:	3740      	adds	r7, #64	@ 0x40
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40020400 	.word	0x40020400

08000d7c <main>:

	vDoSpiIni(&sSpiHandle);
}

int main(void)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b08f      	sub	sp, #60	@ 0x3c
 8000d80:	af00      	add	r7, sp, #0
	char user_data[] = "Hello world!!!";
 8000d82:	4b26      	ldr	r3, [pc, #152]	@ (8000e1c <main+0xa0>)
 8000d84:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000d88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d8a:	c407      	stmia	r4!, {r0, r1, r2}
 8000d8c:	8023      	strh	r3, [r4, #0]
 8000d8e:	3402      	adds	r4, #2
 8000d90:	0c1b      	lsrs	r3, r3, #16
 8000d92:	7023      	strb	r3, [r4, #0]

	vDoSpiGpioConf();
 8000d94:	f7ff ff76 	bl	8000c84 <vDoSpiGpioConf>

//	vDoSpiHandleConf();
	TS_SPI_CONFIG sSpiConf;
	sSpiConf.u8SpiDeviceMode = SPI_DEVICE_MOVE_MASTER;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	f887 3020 	strb.w	r3, [r7, #32]
	sSpiConf.u8SpiBusConfig = SPI_BUS_CONFIG_FD;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	sSpiConf.u8SpiSclkSpeed = SPI_SPEED_PCLK_DIV256;
 8000da4:	2307      	movs	r3, #7
 8000da6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	sSpiConf.u8SpiDff = SPI_DFF_8BITS;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	sSpiConf.u8SpiCpol = SPI_CPOL_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	sSpiConf.u8SpiCpha = SPI_CPHA_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	sSpiConf.u8SpiSsm = SPI_SSM_SW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	TS_SPI_HANDLE sSpiHandle;
	sSpiHandle.psSpiBaseAddr = SPI2;
 8000dc2:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <main+0xa4>)
 8000dc4:	607b      	str	r3, [r7, #4]
	sSpiHandle.psSpiConfig = &sSpiConf;
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	60bb      	str	r3, [r7, #8]
	sSpiHandle.eStateSpiBus = eStateSpiBusReady;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	773b      	strb	r3, [r7, #28]

	vDoSpiPeriClockControl(SPI2, true);
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	4813      	ldr	r0, [pc, #76]	@ (8000e20 <main+0xa4>)
 8000dd4:	f7ff fce8 	bl	80007a8 <vDoSpiPeriClockControl>

	vDoSpiIni(&sSpiHandle);
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fd54 	bl	8000888 <vDoSpiIni>

	vDoSpiIrqConfig(NVIC, IRQ_NO_SPI2, NVIC_IRQ_PRI15, true);
 8000de0:	2301      	movs	r3, #1
 8000de2:	220f      	movs	r2, #15
 8000de4:	2124      	movs	r1, #36	@ 0x24
 8000de6:	480f      	ldr	r0, [pc, #60]	@ (8000e24 <main+0xa8>)
 8000de8:	f7ff fe33 	bl	8000a52 <vDoSpiIrqConfig>

	vDoSpiSsiControl(SPI2, true);
 8000dec:	2101      	movs	r1, #1
 8000dee:	480c      	ldr	r0, [pc, #48]	@ (8000e20 <main+0xa4>)
 8000df0:	f7ff fed7 	bl	8000ba2 <vDoSpiSsiControl>

	vDoSpiPeriControl(SPI2, true);
 8000df4:	2101      	movs	r1, #1
 8000df6:	480a      	ldr	r0, [pc, #40]	@ (8000e20 <main+0xa4>)
 8000df8:	f7ff feb8 	bl	8000b6c <vDoSpiPeriControl>

	while(1)
	{
		vDoSpiSendDataIt(&sSpiHandle, (uint8_t*) user_data, strlen(user_data));
 8000dfc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff f9e7 	bl	80001d4 <strlen>
 8000e06:	4602      	mov	r2, r0
 8000e08:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fdfc 	bl	8000a0c <vDoSpiSendDataIt>
		delay();
 8000e14:	f7ff ff20 	bl	8000c58 <delay>
		vDoSpiSendDataIt(&sSpiHandle, (uint8_t*) user_data, strlen(user_data));
 8000e18:	bf00      	nop
 8000e1a:	e7ef      	b.n	8000dfc <main+0x80>
 8000e1c:	08000f4c 	.word	0x08000f4c
 8000e20:	40003800 	.word	0x40003800
 8000e24:	e000e100 	.word	0xe000e100

08000e28 <vDoSpiEventCallback>:
	}
}

void vDoSpiEventCallback(TS_SPI_HANDLE *psSpiHandle, TE_SPI_STATUS_EVENT eSpiStatusEvent)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	70fb      	strb	r3, [r7, #3]

}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
	...

08000e40 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	@ 0x28
 8000e44:	af00      	add	r7, sp, #0
	TS_SPI_CONFIG sSpiConf;
		sSpiConf.u8SpiDeviceMode = SPI_DEVICE_MOVE_MASTER;
 8000e46:	2301      	movs	r3, #1
 8000e48:	f887 3020 	strb.w	r3, [r7, #32]
		sSpiConf.u8SpiBusConfig = SPI_BUS_CONFIG_FD;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		sSpiConf.u8SpiSclkSpeed = SPI_SPEED_PCLK_DIV256;
 8000e52:	2307      	movs	r3, #7
 8000e54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		sSpiConf.u8SpiDff = SPI_DFF_8BITS;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		sSpiConf.u8SpiCpol = SPI_CPOL_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		sSpiConf.u8SpiCpha = SPI_CPHA_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		sSpiConf.u8SpiSsm = SPI_SSM_SW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

		TS_SPI_HANDLE sSpiHandle;
		sSpiHandle.psSpiBaseAddr = SPI2;
 8000e70:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <SPI2_IRQHandler+0x50>)
 8000e72:	607b      	str	r3, [r7, #4]
		sSpiHandle.psSpiConfig = &sSpiConf;
 8000e74:	f107 0320 	add.w	r3, r7, #32
 8000e78:	60bb      	str	r3, [r7, #8]
		sSpiHandle.eStateSpiBus = eStateSpiBusReady;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	773b      	strb	r3, [r7, #28]
	vDoSpiIrqHandling(EXTI, &sSpiHandle);
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	4619      	mov	r1, r3
 8000e82:	4804      	ldr	r0, [pc, #16]	@ (8000e94 <SPI2_IRQHandler+0x54>)
 8000e84:	f7ff fe36 	bl	8000af4 <vDoSpiIrqHandling>
}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	@ 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40003800 	.word	0x40003800
 8000e94:	40013c00 	.word	0x40013c00

08000e98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e98:	480d      	ldr	r0, [pc, #52]	@ (8000ed0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e9a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e9c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea0:	480c      	ldr	r0, [pc, #48]	@ (8000ed4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ea2:	490d      	ldr	r1, [pc, #52]	@ (8000ed8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <LoopForever+0xe>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ee4 <LoopForever+0x16>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ec6:	f000 f811 	bl	8000eec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eca:	f7ff ff57 	bl	8000d7c <main>

08000ece <LoopForever>:

LoopForever:
  b LoopForever
 8000ece:	e7fe      	b.n	8000ece <LoopForever>
  ldr   r0, =_estack
 8000ed0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000edc:	08000f6c 	.word	0x08000f6c
  ldr r2, =_sbss
 8000ee0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ee4:	2000001c 	.word	0x2000001c

08000ee8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC_IRQHandler>
	...

08000eec <__libc_init_array>:
 8000eec:	b570      	push	{r4, r5, r6, lr}
 8000eee:	4d0d      	ldr	r5, [pc, #52]	@ (8000f24 <__libc_init_array+0x38>)
 8000ef0:	4c0d      	ldr	r4, [pc, #52]	@ (8000f28 <__libc_init_array+0x3c>)
 8000ef2:	1b64      	subs	r4, r4, r5
 8000ef4:	10a4      	asrs	r4, r4, #2
 8000ef6:	2600      	movs	r6, #0
 8000ef8:	42a6      	cmp	r6, r4
 8000efa:	d109      	bne.n	8000f10 <__libc_init_array+0x24>
 8000efc:	4d0b      	ldr	r5, [pc, #44]	@ (8000f2c <__libc_init_array+0x40>)
 8000efe:	4c0c      	ldr	r4, [pc, #48]	@ (8000f30 <__libc_init_array+0x44>)
 8000f00:	f000 f818 	bl	8000f34 <_init>
 8000f04:	1b64      	subs	r4, r4, r5
 8000f06:	10a4      	asrs	r4, r4, #2
 8000f08:	2600      	movs	r6, #0
 8000f0a:	42a6      	cmp	r6, r4
 8000f0c:	d105      	bne.n	8000f1a <__libc_init_array+0x2e>
 8000f0e:	bd70      	pop	{r4, r5, r6, pc}
 8000f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f14:	4798      	blx	r3
 8000f16:	3601      	adds	r6, #1
 8000f18:	e7ee      	b.n	8000ef8 <__libc_init_array+0xc>
 8000f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f1e:	4798      	blx	r3
 8000f20:	3601      	adds	r6, #1
 8000f22:	e7f2      	b.n	8000f0a <__libc_init_array+0x1e>
 8000f24:	08000f64 	.word	0x08000f64
 8000f28:	08000f64 	.word	0x08000f64
 8000f2c:	08000f64 	.word	0x08000f64
 8000f30:	08000f68 	.word	0x08000f68

08000f34 <_init>:
 8000f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f36:	bf00      	nop
 8000f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f3a:	bc08      	pop	{r3}
 8000f3c:	469e      	mov	lr, r3
 8000f3e:	4770      	bx	lr

08000f40 <_fini>:
 8000f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f42:	bf00      	nop
 8000f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f46:	bc08      	pop	{r3}
 8000f48:	469e      	mov	lr, r3
 8000f4a:	4770      	bx	lr
