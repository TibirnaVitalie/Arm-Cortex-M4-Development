
Arm Cortex-M4 Development.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004d8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800066c  08000674  00001674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800066c  0800066c  00001674  2**0
                  CONTENTS
  4 .ARM          00000000  0800066c  0800066c  00001674  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800066c  08000674  00001674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800066c  0800066c  0000166c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000670  08000670  00001670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000674  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000674  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00001674  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008b0  00000000  00000000  0000169e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000257  00000000  00000000  00001f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  000021a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000007f  00000000  00000000  00002260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001342  00000000  00000000  000022df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000cc1  00000000  00000000  00003621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004fde  00000000  00000000  000042e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000092c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000224  00000000  00000000  00009304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00009528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000654 	.word	0x08000654

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000654 	.word	0x08000654

080001d4 <vDoGpioPeriClockControl>:
 * 					boolean bState - State of GPIO peripheral clock
 * Return       : void
 * ===========================================================================
 */
void vDoGpioPeriClockControl(TS_GPIO_REG_DEF *psGpioPort, bool bState)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	460b      	mov	r3, r1
 80001de:	70fb      	strb	r3, [r7, #3]
	if(bState)
 80001e0:	78fb      	ldrb	r3, [r7, #3]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d041      	beq.n	800026a <vDoGpioPeriClockControl+0x96>
	{
		if(psGpioPort == GPIOA)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a43      	ldr	r2, [pc, #268]	@ (80002f8 <vDoGpioPeriClockControl+0x124>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d106      	bne.n	80001fc <vDoGpioPeriClockControl+0x28>
		{
			GPIOA_PCKL_EN();
 80001ee:	4b43      	ldr	r3, [pc, #268]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 80001f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f2:	4a42      	ldr	r2, [pc, #264]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 80001f4:	f043 0301 	orr.w	r3, r3, #1
 80001f8:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (psGpioPort == GPIOH)
		{
			GPIOH_PCKL_DI();
		}
	}
}
 80001fa:	e077      	b.n	80002ec <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOB)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4a40      	ldr	r2, [pc, #256]	@ (8000300 <vDoGpioPeriClockControl+0x12c>)
 8000200:	4293      	cmp	r3, r2
 8000202:	d106      	bne.n	8000212 <vDoGpioPeriClockControl+0x3e>
			GPIOB_PCKL_EN();
 8000204:	4b3d      	ldr	r3, [pc, #244]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 8000206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000208:	4a3c      	ldr	r2, [pc, #240]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 800020a:	f043 0302 	orr.w	r3, r3, #2
 800020e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000210:	e06c      	b.n	80002ec <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOC)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	4a3b      	ldr	r2, [pc, #236]	@ (8000304 <vDoGpioPeriClockControl+0x130>)
 8000216:	4293      	cmp	r3, r2
 8000218:	d106      	bne.n	8000228 <vDoGpioPeriClockControl+0x54>
			GPIOC_PCKL_EN();
 800021a:	4b38      	ldr	r3, [pc, #224]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 800021c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800021e:	4a37      	ldr	r2, [pc, #220]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 8000220:	f043 0304 	orr.w	r3, r3, #4
 8000224:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000226:	e061      	b.n	80002ec <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOD)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4a37      	ldr	r2, [pc, #220]	@ (8000308 <vDoGpioPeriClockControl+0x134>)
 800022c:	4293      	cmp	r3, r2
 800022e:	d106      	bne.n	800023e <vDoGpioPeriClockControl+0x6a>
			GPIOD_PCKL_EN();
 8000230:	4b32      	ldr	r3, [pc, #200]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 8000232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000234:	4a31      	ldr	r2, [pc, #196]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 8000236:	f043 0308 	orr.w	r3, r3, #8
 800023a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800023c:	e056      	b.n	80002ec <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOE)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4a32      	ldr	r2, [pc, #200]	@ (800030c <vDoGpioPeriClockControl+0x138>)
 8000242:	4293      	cmp	r3, r2
 8000244:	d106      	bne.n	8000254 <vDoGpioPeriClockControl+0x80>
			GPIOE_PCKL_EN();
 8000246:	4b2d      	ldr	r3, [pc, #180]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 8000248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024a:	4a2c      	ldr	r2, [pc, #176]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 800024c:	f043 0310 	orr.w	r3, r3, #16
 8000250:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000252:	e04b      	b.n	80002ec <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOH)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	4a2e      	ldr	r2, [pc, #184]	@ (8000310 <vDoGpioPeriClockControl+0x13c>)
 8000258:	4293      	cmp	r3, r2
 800025a:	d147      	bne.n	80002ec <vDoGpioPeriClockControl+0x118>
			GPIOH_PCKL_EN();
 800025c:	4b27      	ldr	r3, [pc, #156]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 800025e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000260:	4a26      	ldr	r2, [pc, #152]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 8000262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000266:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000268:	e040      	b.n	80002ec <vDoGpioPeriClockControl+0x118>
		if(psGpioPort == GPIOA)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4a22      	ldr	r2, [pc, #136]	@ (80002f8 <vDoGpioPeriClockControl+0x124>)
 800026e:	4293      	cmp	r3, r2
 8000270:	d106      	bne.n	8000280 <vDoGpioPeriClockControl+0xac>
			GPIOA_PCKL_DI();
 8000272:	4b22      	ldr	r3, [pc, #136]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 8000274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000276:	4a21      	ldr	r2, [pc, #132]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 8000278:	f023 0301 	bic.w	r3, r3, #1
 800027c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800027e:	e035      	b.n	80002ec <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOB)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4a1f      	ldr	r2, [pc, #124]	@ (8000300 <vDoGpioPeriClockControl+0x12c>)
 8000284:	4293      	cmp	r3, r2
 8000286:	d106      	bne.n	8000296 <vDoGpioPeriClockControl+0xc2>
			GPIOB_PCKL_DI();
 8000288:	4b1c      	ldr	r3, [pc, #112]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 800028a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800028c:	4a1b      	ldr	r2, [pc, #108]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 800028e:	f023 0302 	bic.w	r3, r3, #2
 8000292:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000294:	e02a      	b.n	80002ec <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOC)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	4a1a      	ldr	r2, [pc, #104]	@ (8000304 <vDoGpioPeriClockControl+0x130>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d106      	bne.n	80002ac <vDoGpioPeriClockControl+0xd8>
			GPIOC_PCKL_DI();
 800029e:	4b17      	ldr	r3, [pc, #92]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 80002a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a2:	4a16      	ldr	r2, [pc, #88]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 80002a4:	f023 0304 	bic.w	r3, r3, #4
 80002a8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002aa:	e01f      	b.n	80002ec <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOD)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	4a16      	ldr	r2, [pc, #88]	@ (8000308 <vDoGpioPeriClockControl+0x134>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d106      	bne.n	80002c2 <vDoGpioPeriClockControl+0xee>
			GPIOD_PCKL_DI();
 80002b4:	4b11      	ldr	r3, [pc, #68]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b8:	4a10      	ldr	r2, [pc, #64]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 80002ba:	f023 0308 	bic.w	r3, r3, #8
 80002be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002c0:	e014      	b.n	80002ec <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOE)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a11      	ldr	r2, [pc, #68]	@ (800030c <vDoGpioPeriClockControl+0x138>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d106      	bne.n	80002d8 <vDoGpioPeriClockControl+0x104>
			GPIOE_PCKL_DI();
 80002ca:	4b0c      	ldr	r3, [pc, #48]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 80002cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ce:	4a0b      	ldr	r2, [pc, #44]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 80002d0:	f023 0310 	bic.w	r3, r3, #16
 80002d4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002d6:	e009      	b.n	80002ec <vDoGpioPeriClockControl+0x118>
		else if (psGpioPort == GPIOH)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4a0d      	ldr	r2, [pc, #52]	@ (8000310 <vDoGpioPeriClockControl+0x13c>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d105      	bne.n	80002ec <vDoGpioPeriClockControl+0x118>
			GPIOH_PCKL_DI();
 80002e0:	4b06      	ldr	r3, [pc, #24]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 80002e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e4:	4a05      	ldr	r2, [pc, #20]	@ (80002fc <vDoGpioPeriClockControl+0x128>)
 80002e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80002ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40020000 	.word	0x40020000
 80002fc:	40023800 	.word	0x40023800
 8000300:	40020400 	.word	0x40020400
 8000304:	40020800 	.word	0x40020800
 8000308:	40020c00 	.word	0x40020c00
 800030c:	40021000 	.word	0x40021000
 8000310:	40021c00 	.word	0x40021c00

08000314 <vDoGpioIni>:
 * 					TS_GPIO_HANDLE *psGpioHandle - GPIO Handle structure
 * Return       : void
 * ===========================================================================
 */
void vDoGpioIni(TS_GPIO_HANDLE *psGpioHandle)
{
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	uint8_t u8GpioPin = (psGpioHandle->sGpioPinConfig->u8GpioPinNum & 0x0F);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	685b      	ldr	r3, [r3, #4]
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	f003 030f 	and.w	r3, r3, #15
 8000326:	73fb      	strb	r3, [r7, #15]

	/* Initialize GPIO Pin Mode */
	psGpioHandle->psGpioBaseAddr->MODER &= ~( 0x03 << (u8GpioPin * 2U));
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	7bfb      	ldrb	r3, [r7, #15]
 8000330:	005b      	lsls	r3, r3, #1
 8000332:	2103      	movs	r1, #3
 8000334:	fa01 f303 	lsl.w	r3, r1, r3
 8000338:	43db      	mvns	r3, r3
 800033a:	4619      	mov	r1, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	400a      	ands	r2, r1
 8000342:	601a      	str	r2, [r3, #0]
	psGpioHandle->psGpioBaseAddr->MODER |= ((psGpioHandle->sGpioPinConfig->u8GpioPinMode & 0x03) << (u8GpioPin * 2U));
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	685b      	ldr	r3, [r3, #4]
 800034e:	785b      	ldrb	r3, [r3, #1]
 8000350:	f003 0103 	and.w	r1, r3, #3
 8000354:	7bfb      	ldrb	r3, [r7, #15]
 8000356:	005b      	lsls	r3, r3, #1
 8000358:	fa01 f303 	lsl.w	r3, r1, r3
 800035c:	4619      	mov	r1, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	430a      	orrs	r2, r1
 8000364:	601a      	str	r2, [r3, #0]

	/* Initialize GPIO Pin Speed */
	psGpioHandle->psGpioBaseAddr->OSPEEDR &= ~( 0x03 << (u8GpioPin * 2U));
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	689a      	ldr	r2, [r3, #8]
 800036c:	7bfb      	ldrb	r3, [r7, #15]
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	2103      	movs	r1, #3
 8000372:	fa01 f303 	lsl.w	r3, r1, r3
 8000376:	43db      	mvns	r3, r3
 8000378:	4619      	mov	r1, r3
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	400a      	ands	r2, r1
 8000380:	609a      	str	r2, [r3, #8]
	psGpioHandle->psGpioBaseAddr->OSPEEDR |= ((psGpioHandle->sGpioPinConfig->u8GpioPinSpeed & 0x03) << (u8GpioPin * 2U));
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	689a      	ldr	r2, [r3, #8]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	789b      	ldrb	r3, [r3, #2]
 800038e:	f003 0103 	and.w	r1, r3, #3
 8000392:	7bfb      	ldrb	r3, [r7, #15]
 8000394:	005b      	lsls	r3, r3, #1
 8000396:	fa01 f303 	lsl.w	r3, r1, r3
 800039a:	4619      	mov	r1, r3
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	430a      	orrs	r2, r1
 80003a2:	609a      	str	r2, [r3, #8]

	/* Initialize GPIO Pin Pull-Up/Pull-Down mode */
	psGpioHandle->psGpioBaseAddr->PUPDR &= ~( 0x03 << (u8GpioPin * 2U));
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	68da      	ldr	r2, [r3, #12]
 80003aa:	7bfb      	ldrb	r3, [r7, #15]
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	2103      	movs	r1, #3
 80003b0:	fa01 f303 	lsl.w	r3, r1, r3
 80003b4:	43db      	mvns	r3, r3
 80003b6:	4619      	mov	r1, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	400a      	ands	r2, r1
 80003be:	60da      	str	r2, [r3, #12]
	psGpioHandle->psGpioBaseAddr->PUPDR |= ((psGpioHandle->sGpioPinConfig->u8GpioPinPuPdControl & 0x03) << (u8GpioPin * 2U));
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	68da      	ldr	r2, [r3, #12]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	78db      	ldrb	r3, [r3, #3]
 80003cc:	f003 0103 	and.w	r1, r3, #3
 80003d0:	7bfb      	ldrb	r3, [r7, #15]
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	fa01 f303 	lsl.w	r3, r1, r3
 80003d8:	4619      	mov	r1, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	430a      	orrs	r2, r1
 80003e0:	60da      	str	r2, [r3, #12]

	/* Initialize GPIO Pin Output type */
	psGpioHandle->psGpioBaseAddr->OTYPER &= ~( 0x01 << (u8GpioPin * 2U));
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	685a      	ldr	r2, [r3, #4]
 80003e8:	7bfb      	ldrb	r3, [r7, #15]
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	2101      	movs	r1, #1
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	43db      	mvns	r3, r3
 80003f4:	4619      	mov	r1, r3
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	400a      	ands	r2, r1
 80003fc:	605a      	str	r2, [r3, #4]
	psGpioHandle->psGpioBaseAddr->OTYPER |= ((psGpioHandle->sGpioPinConfig->u8GpioPinOPType & 0x01) << u8GpioPin);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	685a      	ldr	r2, [r3, #4]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	791b      	ldrb	r3, [r3, #4]
 800040a:	f003 0101 	and.w	r1, r3, #1
 800040e:	7bfb      	ldrb	r3, [r7, #15]
 8000410:	fa01 f303 	lsl.w	r3, r1, r3
 8000414:	4619      	mov	r1, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	430a      	orrs	r2, r1
 800041c:	605a      	str	r2, [r3, #4]

	/* Initialize GPIO Pin Alternate functions mode */
	if(psGpioHandle->sGpioPinConfig->u8GpioPinMode == (uint8_t)GPIO_MODE_ALT_FUNC)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	785b      	ldrb	r3, [r3, #1]
 8000424:	2b02      	cmp	r3, #2
 8000426:	d134      	bne.n	8000492 <vDoGpioIni+0x17e>
	{
		psGpioHandle->psGpioBaseAddr->AFR[(u8GpioPin / 32U)] &= ~(( 0x0F << (u8GpioPin * 4U) % 32U));
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	7bfa      	ldrb	r2, [r7, #15]
 800042e:	0952      	lsrs	r2, r2, #5
 8000430:	b2d0      	uxtb	r0, r2
 8000432:	4602      	mov	r2, r0
 8000434:	3208      	adds	r2, #8
 8000436:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800043a:	7bfb      	ldrb	r3, [r7, #15]
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	f003 031c 	and.w	r3, r3, #28
 8000442:	210f      	movs	r1, #15
 8000444:	fa01 f303 	lsl.w	r3, r1, r3
 8000448:	43db      	mvns	r3, r3
 800044a:	4619      	mov	r1, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4011      	ands	r1, r2
 8000452:	f100 0208 	add.w	r2, r0, #8
 8000456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		psGpioHandle->psGpioBaseAddr->AFR[(u8GpioPin / 32U)] |= ((psGpioHandle->sGpioPinConfig->u8GpioPinAltFunMode & 0x0F) << ((u8GpioPin * 4U) % 32U));
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	7bfa      	ldrb	r2, [r7, #15]
 8000460:	0952      	lsrs	r2, r2, #5
 8000462:	b2d0      	uxtb	r0, r2
 8000464:	4602      	mov	r2, r0
 8000466:	3208      	adds	r2, #8
 8000468:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	795b      	ldrb	r3, [r3, #5]
 8000472:	f003 010f 	and.w	r1, r3, #15
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	f003 031c 	and.w	r3, r3, #28
 800047e:	fa01 f303 	lsl.w	r3, r1, r3
 8000482:	4619      	mov	r1, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4311      	orrs	r1, r2
 800048a:	f100 0208 	add.w	r2, r0, #8
 800048e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000492:	bf00      	nop
 8000494:	3714      	adds	r7, #20
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <bDoGpioReadPin>:
 * 					uint8_t u8GpioPin - GPIO Pin
 * Return       : boolean - state on GPIO Pin
 * ===========================================================================
 */
bool bDoGpioReadPin(TS_GPIO_REG_DEF *psGpioPort, uint8_t u8GpioPin)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	460b      	mov	r3, r1
 80004a6:	70fb      	strb	r3, [r7, #3]
	return (((psGpioPort->IDR >> (u8GpioPin & 0x0F)) & 0x00000001) == 0x00000001);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	691a      	ldr	r2, [r3, #16]
 80004ac:	78fb      	ldrb	r3, [r7, #3]
 80004ae:	f003 030f 	and.w	r3, r3, #15
 80004b2:	fa22 f303 	lsr.w	r3, r2, r3
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	bf0c      	ite	eq
 80004be:	2301      	moveq	r3, #1
 80004c0:	2300      	movne	r3, #0
 80004c2:	b2db      	uxtb	r3, r3
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr

080004ce <vDoGpioWritePin>:
 * 					boolean bValue - State of the GPIO Pin
 * Return       : void
 * ===========================================================================
 */
void vDoGpioWritePin(TS_GPIO_REG_DEF *psGpioPort, uint8_t u8GpioPin, bool bValue)
{
 80004ce:	b480      	push	{r7}
 80004d0:	b083      	sub	sp, #12
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	460b      	mov	r3, r1
 80004d8:	70fb      	strb	r3, [r7, #3]
 80004da:	4613      	mov	r3, r2
 80004dc:	70bb      	strb	r3, [r7, #2]
	if(bValue)
 80004de:	78bb      	ldrb	r3, [r7, #2]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d00b      	beq.n	80004fc <vDoGpioWritePin+0x2e>
	{
		psGpioPort->ODR |= (1 << (u8GpioPin & 0x0F));
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	78fa      	ldrb	r2, [r7, #3]
 80004ea:	f002 020f 	and.w	r2, r2, #15
 80004ee:	2101      	movs	r1, #1
 80004f0:	fa01 f202 	lsl.w	r2, r1, r2
 80004f4:	431a      	orrs	r2, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	615a      	str	r2, [r3, #20]
	}
	else
	{
		psGpioPort->ODR &= ~(1 << (u8GpioPin & 0x0F));
	}
}
 80004fa:	e00b      	b.n	8000514 <vDoGpioWritePin+0x46>
		psGpioPort->ODR &= ~(1 << (u8GpioPin & 0x0F));
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	695b      	ldr	r3, [r3, #20]
 8000500:	78fa      	ldrb	r2, [r7, #3]
 8000502:	f002 020f 	and.w	r2, r2, #15
 8000506:	2101      	movs	r1, #1
 8000508:	fa01 f202 	lsl.w	r2, r1, r2
 800050c:	43d2      	mvns	r2, r2
 800050e:	401a      	ands	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	615a      	str	r2, [r3, #20]
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
	...

08000520 <main>:
		;
	}
}

int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0
	TS_GPIO_CONFIG sGpioKeyConf;
	sGpioKeyConf.u8GpioPinNum = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	763b      	strb	r3, [r7, #24]
	sGpioKeyConf.u8GpioPinMode = GPIO_MODE_IN;
 800052a:	2300      	movs	r3, #0
 800052c:	767b      	strb	r3, [r7, #25]
	sGpioKeyConf.u8GpioPinOPType = GPIO_OUT_MODE_PP;
 800052e:	2300      	movs	r3, #0
 8000530:	773b      	strb	r3, [r7, #28]
	sGpioKeyConf.u8GpioPinPuPdControl = GPIO_PUPD_PU;
 8000532:	2301      	movs	r3, #1
 8000534:	76fb      	strb	r3, [r7, #27]
	sGpioKeyConf.u8GpioPinSpeed = GPIO_OUT_SPEED_LOW;
 8000536:	2300      	movs	r3, #0
 8000538:	76bb      	strb	r3, [r7, #26]

	TS_GPIO_CONFIG sGpioLedConf;
	sGpioLedConf.u8GpioPinNum = 13;
 800053a:	230d      	movs	r3, #13
 800053c:	743b      	strb	r3, [r7, #16]
	sGpioLedConf.u8GpioPinMode = GPIO_MODE_OUT;
 800053e:	2301      	movs	r3, #1
 8000540:	747b      	strb	r3, [r7, #17]
	sGpioLedConf.u8GpioPinOPType = GPIO_OUT_MODE_PP;
 8000542:	2300      	movs	r3, #0
 8000544:	753b      	strb	r3, [r7, #20]
	sGpioLedConf.u8GpioPinPuPdControl = GPIO_PUPD_NU_ND;
 8000546:	2300      	movs	r3, #0
 8000548:	74fb      	strb	r3, [r7, #19]
	sGpioLedConf.u8GpioPinSpeed = GPIO_OUT_SPEED_LOW;
 800054a:	2300      	movs	r3, #0
 800054c:	74bb      	strb	r3, [r7, #18]

	TS_GPIO_HANDLE sGpioKey;
	sGpioKey.psGpioBaseAddr = GPIOA;
 800054e:	4b18      	ldr	r3, [pc, #96]	@ (80005b0 <main+0x90>)
 8000550:	60bb      	str	r3, [r7, #8]
	sGpioKey.sGpioPinConfig = &sGpioKeyConf;
 8000552:	f107 0318 	add.w	r3, r7, #24
 8000556:	60fb      	str	r3, [r7, #12]

	TS_GPIO_HANDLE sGpioLed;
	sGpioLed.psGpioBaseAddr = GPIOC;
 8000558:	4b16      	ldr	r3, [pc, #88]	@ (80005b4 <main+0x94>)
 800055a:	603b      	str	r3, [r7, #0]
	sGpioLed.sGpioPinConfig = &sGpioLedConf;
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	607b      	str	r3, [r7, #4]

	vDoGpioPeriClockControl(GPIOA, true);
 8000562:	2101      	movs	r1, #1
 8000564:	4812      	ldr	r0, [pc, #72]	@ (80005b0 <main+0x90>)
 8000566:	f7ff fe35 	bl	80001d4 <vDoGpioPeriClockControl>
	vDoGpioPeriClockControl(GPIOC, true);
 800056a:	2101      	movs	r1, #1
 800056c:	4811      	ldr	r0, [pc, #68]	@ (80005b4 <main+0x94>)
 800056e:	f7ff fe31 	bl	80001d4 <vDoGpioPeriClockControl>

	vDoGpioIni(&sGpioKey);
 8000572:	f107 0308 	add.w	r3, r7, #8
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff fecc 	bl	8000314 <vDoGpioIni>
	vDoGpioIni(&sGpioLed);
 800057c:	463b      	mov	r3, r7
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff fec8 	bl	8000314 <vDoGpioIni>

	while(true)
	{
		if(!bDoGpioReadPin(GPIOA, 0))
 8000584:	2100      	movs	r1, #0
 8000586:	480a      	ldr	r0, [pc, #40]	@ (80005b0 <main+0x90>)
 8000588:	f7ff ff88 	bl	800049c <bDoGpioReadPin>
 800058c:	4603      	mov	r3, r0
 800058e:	f083 0301 	eor.w	r3, r3, #1
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d005      	beq.n	80005a4 <main+0x84>
		{
			vDoGpioWritePin(GPIOC, 13, false);
 8000598:	2200      	movs	r2, #0
 800059a:	210d      	movs	r1, #13
 800059c:	4805      	ldr	r0, [pc, #20]	@ (80005b4 <main+0x94>)
 800059e:	f7ff ff96 	bl	80004ce <vDoGpioWritePin>
 80005a2:	e7ef      	b.n	8000584 <main+0x64>
		}
		else
		{
			vDoGpioWritePin(GPIOC, 13, true);
 80005a4:	2201      	movs	r2, #1
 80005a6:	210d      	movs	r1, #13
 80005a8:	4802      	ldr	r0, [pc, #8]	@ (80005b4 <main+0x94>)
 80005aa:	f7ff ff90 	bl	80004ce <vDoGpioWritePin>
		if(!bDoGpioReadPin(GPIOA, 0))
 80005ae:	e7e9      	b.n	8000584 <main+0x64>
 80005b0:	40020000 	.word	0x40020000
 80005b4:	40020800 	.word	0x40020800

080005b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b8:	480d      	ldr	r0, [pc, #52]	@ (80005f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c0:	480c      	ldr	r0, [pc, #48]	@ (80005f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005c2:	490d      	ldr	r1, [pc, #52]	@ (80005f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c4:	4a0d      	ldr	r2, [pc, #52]	@ (80005fc <LoopForever+0xe>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c8:	e002      	b.n	80005d0 <LoopCopyDataInit>

080005ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ce:	3304      	adds	r3, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d4:	d3f9      	bcc.n	80005ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000604 <LoopForever+0x16>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005dc:	e001      	b.n	80005e2 <LoopFillZerobss>

080005de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e0:	3204      	adds	r2, #4

080005e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e4:	d3fb      	bcc.n	80005de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005e6:	f000 f811 	bl	800060c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ea:	f7ff ff99 	bl	8000520 <main>

080005ee <LoopForever>:

LoopForever:
  b LoopForever
 80005ee:	e7fe      	b.n	80005ee <LoopForever>
  ldr   r0, =_estack
 80005f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005fc:	08000674 	.word	0x08000674
  ldr r2, =_sbss
 8000600:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000604:	2000001c 	.word	0x2000001c

08000608 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000608:	e7fe      	b.n	8000608 <ADC_IRQHandler>
	...

0800060c <__libc_init_array>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	4d0d      	ldr	r5, [pc, #52]	@ (8000644 <__libc_init_array+0x38>)
 8000610:	4c0d      	ldr	r4, [pc, #52]	@ (8000648 <__libc_init_array+0x3c>)
 8000612:	1b64      	subs	r4, r4, r5
 8000614:	10a4      	asrs	r4, r4, #2
 8000616:	2600      	movs	r6, #0
 8000618:	42a6      	cmp	r6, r4
 800061a:	d109      	bne.n	8000630 <__libc_init_array+0x24>
 800061c:	4d0b      	ldr	r5, [pc, #44]	@ (800064c <__libc_init_array+0x40>)
 800061e:	4c0c      	ldr	r4, [pc, #48]	@ (8000650 <__libc_init_array+0x44>)
 8000620:	f000 f818 	bl	8000654 <_init>
 8000624:	1b64      	subs	r4, r4, r5
 8000626:	10a4      	asrs	r4, r4, #2
 8000628:	2600      	movs	r6, #0
 800062a:	42a6      	cmp	r6, r4
 800062c:	d105      	bne.n	800063a <__libc_init_array+0x2e>
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f855 3b04 	ldr.w	r3, [r5], #4
 8000634:	4798      	blx	r3
 8000636:	3601      	adds	r6, #1
 8000638:	e7ee      	b.n	8000618 <__libc_init_array+0xc>
 800063a:	f855 3b04 	ldr.w	r3, [r5], #4
 800063e:	4798      	blx	r3
 8000640:	3601      	adds	r6, #1
 8000642:	e7f2      	b.n	800062a <__libc_init_array+0x1e>
 8000644:	0800066c 	.word	0x0800066c
 8000648:	0800066c 	.word	0x0800066c
 800064c:	0800066c 	.word	0x0800066c
 8000650:	08000670 	.word	0x08000670

08000654 <_init>:
 8000654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000656:	bf00      	nop
 8000658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800065a:	bc08      	pop	{r3}
 800065c:	469e      	mov	lr, r3
 800065e:	4770      	bx	lr

08000660 <_fini>:
 8000660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000662:	bf00      	nop
 8000664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000666:	bc08      	pop	{r3}
 8000668:	469e      	mov	lr, r3
 800066a:	4770      	bx	lr
